// // // // // // // // // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';

// // // // // // // // // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState({
// // // // // // // // // // // // // // // // // // // // // // //     a: '',
// // // // // // // // // // // // // // // // // // // // // // //     b: '',
// // // // // // // // // // // // // // // // // // // // // // //     c: ''
// // // // // // // // // // // // // // // // // // // // // // //   });
// // // // // // // // // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // // // // // // // // //     const a = parseFloat(coefficients.a);
// // // // // // // // // // // // // // // // // // // // // // //     const b = parseFloat(coefficients.b);
// // // // // // // // // // // // // // // // // // // // // // //     const c = parseFloat(coefficients.c);

// // // // // // // // // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // // // // // // // // //       setError('Please enter valid numbers for all coefficients');
// // // // // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // // // // // // // // //       setError('Coefficient of xÂ² cannot be zero');
// // // // // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // // // // // // // // // // // // // // //         equation: `${a}x^2 + ${b}x + ${c} = 0`
// // // // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // // // // // // // // // // // // // // //         equation: `${a}x^2 + ${b}x + ${c} = 0`
// // // // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // // // // // // // // // // // // // // //         equation: `${a}x^2 + ${b}x + ${c} = 0`
// // // // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // // // // // // // // //       <div className="result">
// // // // // // // // // // // // // // // // // // // // // // //         <p className="result-title">Equation:</p>
// // // // // // // // // // // // // // // // // // // // // // //         <p className="equation" dangerouslySetInnerHTML={renderKaTeX(result.equation)} />
        
// // // // // // // // // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // // // //             <p className="result-title">Solutions:</p>
// // // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // // // //             <p className="result-title">Solution:</p>
// // // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // // // // // // // // //             <p className="note">(Double root)</p>
// // // // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // // // //             <p className="result-title">Complex Solutions:</p>
// // // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // // // // // // // // //     <div className="solver-container">
// // // // // // // // // // // // // // // // // // // // // // //       <div className="solver-card">
// // // // // // // // // // // // // // // // // // // // // // //         <h1 className="title">Quadratic Equation Solver</h1>
        
// // // // // // // // // // // // // // // // // // // // // // //         <div className="input-container">
// // // // // // // // // // // // // // // // // // // // // // //           <div className="input-group">
// // // // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // // // //               className="coefficient-input"
// // // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // // //             <span className="term" dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // // // //           <span className="operator">+</span>
// // // // // // // // // // // // // // // // // // // // // // //           <div className="input-group">
// // // // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // // // //               className="coefficient-input"
// // // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // // //             <span className="term" dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // // // //           <span className="operator">+</span>
// // // // // // // // // // // // // // // // // // // // // // //           <div className="input-group">
// // // // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // // // //               className="coefficient-input"
// // // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // // // //           <span className="operator">=</span>
// // // // // // // // // // // // // // // // // // // // // // //           <span className="term">0</span>
// // // // // // // // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // // // // // // // //         <button onClick={solveQuadratic} className="solve-button">
// // // // // // // // // // // // // // // // // // // // // // //           Solve
// // // // // // // // // // // // // // // // // // // // // // //         </button>

// // // // // // // // // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // // // // // // // // //           <div className="error-message">
// // // // // // // // // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // // // // // // // // //       </div>
      
// // // // // // // // // // // // // // // // // // // // // // //       <style jsx>{`
// // // // // // // // // // // // // // // // // // // // // // //         .solver-container {
// // // // // // // // // // // // // // // // // // // // // // //           display: flex;
// // // // // // // // // // // // // // // // // // // // // // //           justify-content: center;
// // // // // // // // // // // // // // // // // // // // // // //           padding: 2rem;
// // // // // // // // // // // // // // // // // // // // // // //           min-height: 100vh;
// // // // // // // // // // // // // // // // // // // // // // //           background-color: #f5f5f5;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .solver-card {
// // // // // // // // // // // // // // // // // // // // // // //           background: white;
// // // // // // // // // // // // // // // // // // // // // // //           border-radius: 8px;
// // // // // // // // // // // // // // // // // // // // // // //           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
// // // // // // // // // // // // // // // // // // // // // // //           padding: 2rem;
// // // // // // // // // // // // // // // // // // // // // // //           width: 100%;
// // // // // // // // // // // // // // // // // // // // // // //           max-width: 800px;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .title {
// // // // // // // // // // // // // // // // // // // // // // //           text-align: center;
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 1.5rem;
// // // // // // // // // // // // // // // // // // // // // // //           font-weight: 600;
// // // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 2rem;
// // // // // // // // // // // // // // // // // // // // // // //           color: #333;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .input-container {
// // // // // // // // // // // // // // // // // // // // // // //           display: flex;
// // // // // // // // // // // // // // // // // // // // // // //           align-items: center;
// // // // // // // // // // // // // // // // // // // // // // //           justify-content: center;
// // // // // // // // // // // // // // // // // // // // // // //           gap: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 1.5rem;
// // // // // // // // // // // // // // // // // // // // // // //           flex-wrap: wrap;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .input-group {
// // // // // // // // // // // // // // // // // // // // // // //           display: flex;
// // // // // // // // // // // // // // // // // // // // // // //           align-items: center;
// // // // // // // // // // // // // // // // // // // // // // //           gap: 0.25rem;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .coefficient-input {
// // // // // // // // // // // // // // // // // // // // // // //           width: 80px;
// // // // // // // // // // // // // // // // // // // // // // //           padding: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // // //           border: 1px solid #ddd;
// // // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 1rem;
// // // // // // // // // // // // // // // // // // // // // // //           transition: border-color 0.2s;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .coefficient-input:focus {
// // // // // // // // // // // // // // // // // // // // // // //           outline: none;
// // // // // // // // // // // // // // // // // // // // // // //           border-color: #4299e1;
// // // // // // // // // // // // // // // // // // // // // // //           box-shadow: 0 0 0 2px rgba(66, 153, 225, 0.2);
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .term {
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 1.1rem;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .operator {
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 1.2rem;
// // // // // // // // // // // // // // // // // // // // // // //           color: #666;
// // // // // // // // // // // // // // // // // // // // // // //           margin: 0 0.25rem;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .solve-button {
// // // // // // // // // // // // // // // // // // // // // // //           width: 100%;
// // // // // // // // // // // // // // // // // // // // // // //           padding: 0.75rem;
// // // // // // // // // // // // // // // // // // // // // // //           background-color: #4299e1;
// // // // // // // // // // // // // // // // // // // // // // //           color: white;
// // // // // // // // // // // // // // // // // // // // // // //           border: none;
// // // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 1rem;
// // // // // // // // // // // // // // // // // // // // // // //           cursor: pointer;
// // // // // // // // // // // // // // // // // // // // // // //           transition: background-color 0.2s;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .solve-button:hover {
// // // // // // // // // // // // // // // // // // // // // // //           background-color: #3182ce;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .error-message {
// // // // // // // // // // // // // // // // // // // // // // //           margin-top: 1rem;
// // // // // // // // // // // // // // // // // // // // // // //           padding: 0.75rem;
// // // // // // // // // // // // // // // // // // // // // // //           background-color: #fed7d7;
// // // // // // // // // // // // // // // // // // // // // // //           border: 1px solid #f56565;
// // // // // // // // // // // // // // // // // // // // // // //           color: #c53030;
// // // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .result {
// // // // // // // // // // // // // // // // // // // // // // //           margin-top: 2rem;
// // // // // // // // // // // // // // // // // // // // // // //           padding: 1.5rem;
// // // // // // // // // // // // // // // // // // // // // // //           background-color: #f7fafc;
// // // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .result-title {
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 1.1rem;
// // // // // // // // // // // // // // // // // // // // // // //           font-weight: 600;
// // // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // // //           color: #2d3748;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .equation {
// // // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 1rem;
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 1.1rem;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .solution {
// // // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         .note {
// // // // // // // // // // // // // // // // // // // // // // //           font-size: 0.875rem;
// // // // // // // // // // // // // // // // // // // // // // //           color: #718096;
// // // // // // // // // // // // // // // // // // // // // // //           margin-top: 0.25rem;
// // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // //       `}</style>
// // // // // // // // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';

// // // // // // // // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState({
// // // // // // // // // // // // // // // // // // // // // //     a: '',
// // // // // // // // // // // // // // // // // // // // // //     b: '',
// // // // // // // // // // // // // // // // // // // // // //     c: ''
// // // // // // // // // // // // // // // // // // // // // //   });
// // // // // // // // // // // // // // // // // // // // // //   const [signs, setSigns] = useState({
// // // // // // // // // // // // // // // // // // // // // //     a: '+',
// // // // // // // // // // // // // // // // // // // // // //     b: '+',
// // // // // // // // // // // // // // // // // // // // // //     c: '+'
// // // // // // // // // // // // // // // // // // // // // //   });
// // // // // // // // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // // // // // // // //     const a = parseFloat(coefficients.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // // // // //     const b = parseFloat(coefficients.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // // // // //     const c = parseFloat(coefficients.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // // // // // // // //       setError('Please enter valid numbers for all coefficients');
// // // // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // // // // // // // //       setError('Coefficient of xÂ² cannot be zero');
// // // // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // // // // // // // // // // // // // //         equation: `${signs.a}${coefficients.a}x^2 ${signs.b}${coefficients.b}x ${signs.c}${coefficients.c} = 0`
// // // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // // // // // // // // // // // // // //         equation: `${signs.a}${coefficients.a}x^2 ${signs.b}${coefficients.b}x ${signs.c}${coefficients.c} = 0`
// // // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // // // // // // // // // // // // // //         equation: `${signs.a}${coefficients.a}x^2 ${signs.b}${coefficients.b}x ${signs.c}${coefficients.c} = 0`
// // // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // // // // // // // //       <div className="result">
// // // // // // // // // // // // // // // // // // // // // //         <p className="result-title">Equation:</p>
// // // // // // // // // // // // // // // // // // // // // //         <p className="equation" dangerouslySetInnerHTML={renderKaTeX(result.equation)} />
        
// // // // // // // // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // // //             <p className="result-title">Solutions:</p>
// // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // // //             <p className="result-title">Solution:</p>
// // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // // // // // // // //             <p className="note">(Double root)</p>
// // // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // // //             <p className="result-title">Complex Solutions:</p>
// // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // // // //             <p className="solution" dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // //   const SignSelect = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // // // // // // // // //     <select
// // // // // // // // // // // // // // // // // // // // // //       name={name}
// // // // // // // // // // // // // // // // // // // // // //       value={value}
// // // // // // // // // // // // // // // // // // // // // //       onChange={onChange}
// // // // // // // // // // // // // // // // // // // // // //       className="sign-select"
// // // // // // // // // // // // // // // // // // // // // //     >
// // // // // // // // // // // // // // // // // // // // // //       <option value="+">+</option>
// // // // // // // // // // // // // // // // // // // // // //       <option value="-">â</option>
// // // // // // // // // // // // // // // // // // // // // //     </select>
// // // // // // // // // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // // // // // // // //     <div className="solver-container">
// // // // // // // // // // // // // // // // // // // // // //       <div className="solver-card">
// // // // // // // // // // // // // // // // // // // // // //         <h1 className="title">Quadratic Equation Solver</h1>
        
// // // // // // // // // // // // // // // // // // // // // //         <div className="input-container">
// // // // // // // // // // // // // // // // // // // // // //           <div className="input-group">
// // // // // // // // // // // // // // // // // // // // // //             <SignSelect
// // // // // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // // //               className="coefficient-input"
// // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // //             <span className="term" dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // // // // //           <div className="input-group">
// // // // // // // // // // // // // // // // // // // // // //             <SignSelect
// // // // // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // // //               className="coefficient-input"
// // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // //             <span className="term" dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // // // // //           <div className="input-group">
// // // // // // // // // // // // // // // // // // // // // //             <SignSelect
// // // // // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // // //               className="coefficient-input"
// // // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // // //           <span className="operator">=</span>
// // // // // // // // // // // // // // // // // // // // // //           <span className="term">0</span>
// // // // // // // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // // // // // // //         <button onClick={solveQuadratic} className="solve-button">
// // // // // // // // // // // // // // // // // // // // // //           Solve
// // // // // // // // // // // // // // // // // // // // // //         </button>

// // // // // // // // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // // // // // // // //           <div className="error-message">
// // // // // // // // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // // // // // // // //       </div>
      
// // // // // // // // // // // // // // // // // // // // // //       <style jsx>{`
// // // // // // // // // // // // // // // // // // // // // //         .solver-container {
// // // // // // // // // // // // // // // // // // // // // //           display: flex;
// // // // // // // // // // // // // // // // // // // // // //           justify-content: center;
// // // // // // // // // // // // // // // // // // // // // //           padding: 2rem;
// // // // // // // // // // // // // // // // // // // // // //           min-height: 100vh;
// // // // // // // // // // // // // // // // // // // // // //           background-color: #f5f5f5;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .solver-card {
// // // // // // // // // // // // // // // // // // // // // //           background: white;
// // // // // // // // // // // // // // // // // // // // // //           border-radius: 8px;
// // // // // // // // // // // // // // // // // // // // // //           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
// // // // // // // // // // // // // // // // // // // // // //           padding: 2rem;
// // // // // // // // // // // // // // // // // // // // // //           width: 100%;
// // // // // // // // // // // // // // // // // // // // // //           max-width: 800px;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .title {
// // // // // // // // // // // // // // // // // // // // // //           text-align: center;
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1.5rem;
// // // // // // // // // // // // // // // // // // // // // //           font-weight: 600;
// // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 2rem;
// // // // // // // // // // // // // // // // // // // // // //           color: #333;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .input-container {
// // // // // // // // // // // // // // // // // // // // // //           display: flex;
// // // // // // // // // // // // // // // // // // // // // //           align-items: center;
// // // // // // // // // // // // // // // // // // // // // //           justify-content: center;
// // // // // // // // // // // // // // // // // // // // // //           gap: 1rem;
// // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 1.5rem;
// // // // // // // // // // // // // // // // // // // // // //           flex-wrap: wrap;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .input-group {
// // // // // // // // // // // // // // // // // // // // // //           display: flex;
// // // // // // // // // // // // // // // // // // // // // //           align-items: center;
// // // // // // // // // // // // // // // // // // // // // //           gap: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .sign-select {
// // // // // // // // // // // // // // // // // // // // // //           padding: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // //           border: 1px solid #ddd;
// // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1rem;
// // // // // // // // // // // // // // // // // // // // // //           background-color: white;
// // // // // // // // // // // // // // // // // // // // // //           cursor: pointer;
// // // // // // // // // // // // // // // // // // // // // //           transition: border-color 0.2s;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .sign-select:focus {
// // // // // // // // // // // // // // // // // // // // // //           outline: none;
// // // // // // // // // // // // // // // // // // // // // //           border-color: #4299e1;
// // // // // // // // // // // // // // // // // // // // // //           box-shadow: 0 0 0 2px rgba(66, 153, 225, 0.2);
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .coefficient-input {
// // // // // // // // // // // // // // // // // // // // // //           width: 80px;
// // // // // // // // // // // // // // // // // // // // // //           padding: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // //           border: 1px solid #ddd;
// // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1rem;
// // // // // // // // // // // // // // // // // // // // // //           transition: border-color 0.2s;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .coefficient-input:focus {
// // // // // // // // // // // // // // // // // // // // // //           outline: none;
// // // // // // // // // // // // // // // // // // // // // //           border-color: #4299e1;
// // // // // // // // // // // // // // // // // // // // // //           box-shadow: 0 0 0 2px rgba(66, 153, 225, 0.2);
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .term {
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1.1rem;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .operator {
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1.2rem;
// // // // // // // // // // // // // // // // // // // // // //           color: #666;
// // // // // // // // // // // // // // // // // // // // // //           margin: 0 0.25rem;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .solve-button {
// // // // // // // // // // // // // // // // // // // // // //           width: 100%;
// // // // // // // // // // // // // // // // // // // // // //           padding: 0.75rem;
// // // // // // // // // // // // // // // // // // // // // //           background-color: #4299e1;
// // // // // // // // // // // // // // // // // // // // // //           color: white;
// // // // // // // // // // // // // // // // // // // // // //           border: none;
// // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1rem;
// // // // // // // // // // // // // // // // // // // // // //           cursor: pointer;
// // // // // // // // // // // // // // // // // // // // // //           transition: background-color 0.2s;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .solve-button:hover {
// // // // // // // // // // // // // // // // // // // // // //           background-color: #3182ce;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .error-message {
// // // // // // // // // // // // // // // // // // // // // //           margin-top: 1rem;
// // // // // // // // // // // // // // // // // // // // // //           padding: 0.75rem;
// // // // // // // // // // // // // // // // // // // // // //           background-color: #fed7d7;
// // // // // // // // // // // // // // // // // // // // // //           border: 1px solid #f56565;
// // // // // // // // // // // // // // // // // // // // // //           color: #c53030;
// // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .result {
// // // // // // // // // // // // // // // // // // // // // //           margin-top: 2rem;
// // // // // // // // // // // // // // // // // // // // // //           padding: 1.5rem;
// // // // // // // // // // // // // // // // // // // // // //           background-color: #f7fafc;
// // // // // // // // // // // // // // // // // // // // // //           border-radius: 4px;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .result-title {
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1.1rem;
// // // // // // // // // // // // // // // // // // // // // //           font-weight: 600;
// // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // //           color: #2d3748;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .equation {
// // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 1rem;
// // // // // // // // // // // // // // // // // // // // // //           font-size: 1.1rem;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .solution {
// // // // // // // // // // // // // // // // // // // // // //           margin-bottom: 0.5rem;
// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         .note {
// // // // // // // // // // // // // // // // // // // // // //           font-size: 0.875rem;
// // // // // // // // // // // // // // // // // // // // // //           color: #718096;
// // // // // // // // // // // // // // // // // // // // // //           margin-top: 0.25rem;
// // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // //       `}</style>
// // // // // // // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState({
// // // // // // // // // // // // // // // // // // // // //     a: '0',
// // // // // // // // // // // // // // // // // // // // //     b: '0',
// // // // // // // // // // // // // // // // // // // // //     c: '0'
// // // // // // // // // // // // // // // // // // // // //   });
// // // // // // // // // // // // // // // // // // // // //   const [signs, setSigns] = useState({
// // // // // // // // // // // // // // // // // // // // //     a: '+',
// // // // // // // // // // // // // // // // // // // // //     b: '+',
// // // // // // // // // // // // // // // // // // // // //     c: '+'
// // // // // // // // // // // // // // // // // // // // //   });
// // // // // // // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // // // // // // //     const values = {
// // // // // // // // // // // // // // // // // // // // //       a: coefficients.a === '' ? '0' : coefficients.a,
// // // // // // // // // // // // // // // // // // // // //       b: coefficients.b === '' ? '0' : coefficients.b,
// // // // // // // // // // // // // // // // // // // // //       c: coefficients.c === '' ? '0' : coefficients.c
// // // // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // // // //     const a = parseFloat(values.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // // // //     const b = parseFloat(values.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // // // //     const c = parseFloat(values.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;
// // // // // // // // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // // // // // // // //       const numValue = parseFloat(value);
// // // // // // // // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, values.a, true);
// // // // // // // // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, values.b);
// // // // // // // // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, values.c);

// // // // // // // // // // // // // // // // // // // // //     equation = `${aStr || '1'}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`;

// // // // // // // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // //   const SignSelect = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // // // // // // // //     <select
// // // // // // // // // // // // // // // // // // // // //       name={name}
// // // // // // // // // // // // // // // // // // // // //       value={value}
// // // // // // // // // // // // // // // // // // // // //       onChange={onChange}
// // // // // // // // // // // // // // // // // // // // //       className={styles.signSelect}
// // // // // // // // // // // // // // // // // // // // //     >
// // // // // // // // // // // // // // // // // // // // //       <option value="+">+</option>
// // // // // // // // // // // // // // // // // // // // //       <option value="-">â</option>
// // // // // // // // // // // // // // // // // // // // //     </select>
// // // // // // // // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // // // // // // // // // // // // //         <p className={styles.resultTitle}>Equation:</p>
// // // // // // // // // // // // // // // // // // // // //         <p className={styles.equation} dangerouslySetInnerHTML={renderKaTeX(result.equation)} />
        
// // // // // // // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // // // // // // // // //         <h1 className={styles.title}>Quadratic Equation Solver</h1>
        
// // // // // // // // // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // // // //             <SignSelect
// // // // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // // // //             <SignSelect
// // // // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // // // //             <SignSelect
// // // // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // // // // // //         <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // // // // // // // // //           Solve
// // // // // // // // // // // // // // // // // // // // //         </button>

// // // // // // // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState({
// // // // // // // // // // // // // // // // // // // //     a: '0',
// // // // // // // // // // // // // // // // // // // //     b: '0',
// // // // // // // // // // // // // // // // // // // //     c: '0'
// // // // // // // // // // // // // // // // // // // //   });
  
// // // // // // // // // // // // // // // // // // // //   const [signs, setSigns] = useState({
// // // // // // // // // // // // // // // // // // // //     a: '+',
// // // // // // // // // // // // // // // // // // // //     b: '+',
// // // // // // // // // // // // // // // // // // // //     c: '+'
// // // // // // // // // // // // // // // // // // // //   });
  
// // // // // // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // // // // // //     const values = {
// // // // // // // // // // // // // // // // // // // //       a: coefficients.a === '' ? '0' : coefficients.a,
// // // // // // // // // // // // // // // // // // // //       b: coefficients.b === '' ? '0' : coefficients.b,
// // // // // // // // // // // // // // // // // // // //       c: coefficients.c === '' ? '0' : coefficients.c
// // // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // // //     const a = parseFloat(values.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // // //     const b = parseFloat(values.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // // //     const c = parseFloat(values.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;
// // // // // // // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, values.a, true);
// // // // // // // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, values.b);
// // // // // // // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, values.c);

// // // // // // // // // // // // // // // // // // // //     equation = `${aStr || '1'}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`;

// // // // // // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // // // // // // //     <button
// // // // // // // // // // // // // // // // // // // //       type="button"
// // // // // // // // // // // // // // // // // // // //       className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // // // // // // // //       onClick={() => onChange({ 
// // // // // // // // // // // // // // // // // // // //         target: { 
// // // // // // // // // // // // // // // // // // // //           name, 
// // // // // // // // // // // // // // // // // // // //           value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // // // // // // // //         } 
// // // // // // // // // // // // // // // // // // // //       })}
// // // // // // // // // // // // // // // // // // // //       aria-label="Toggle sign"
// // // // // // // // // // // // // // // // // // // //     >
// // // // // // // // // // // // // // // // // // // //       {value}
// // // // // // // // // // // // // // // // // // // //     </button>
// // // // // // // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // // // // // // // // // // // //         <p className={styles.resultTitle}>Equation:</p>
// // // // // // // // // // // // // // // // // // // //         <p className={styles.equation} dangerouslySetInnerHTML={renderKaTeX(result.equation)} />
        
// // // // // // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // // // // // //             <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // // // // // // // //         <h1 className={styles.title}>Quadratic Equation Solver</h1>
        
// // // // // // // // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // // // // //         <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // // // // // // // //           Solve
// // // // // // // // // // // // // // // // // // // //         </button>

// // // // // // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState({
// // // // // // // // // // // // // // // // // // //     a: '0',
// // // // // // // // // // // // // // // // // // //     b: '0',
// // // // // // // // // // // // // // // // // // //     c: '0'
// // // // // // // // // // // // // // // // // // //   });
  
// // // // // // // // // // // // // // // // // // //   const [signs, setSigns] = useState({
// // // // // // // // // // // // // // // // // // //     a: '+',
// // // // // // // // // // // // // // // // // // //     b: '+',
// // // // // // // // // // // // // // // // // // //     c: '+'
// // // // // // // // // // // // // // // // // // //   });
  
// // // // // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // // // // //     const values = {
// // // // // // // // // // // // // // // // // // //       a: coefficients.a === '' ? '0' : coefficients.a,
// // // // // // // // // // // // // // // // // // //       b: coefficients.b === '' ? '0' : coefficients.b,
// // // // // // // // // // // // // // // // // // //       c: coefficients.c === '' ? '0' : coefficients.c
// // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // //     const a = parseFloat(values.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // //     const b = parseFloat(values.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // // //     const c = parseFloat(values.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;
// // // // // // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, values.a, true);
// // // // // // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, values.b);
// // // // // // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, values.c);

// // // // // // // // // // // // // // // // // // //     equation = `${aStr || '1'}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`;

// // // // // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // // // // // //     <button
// // // // // // // // // // // // // // // // // // //       type="button"
// // // // // // // // // // // // // // // // // // //       className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // // // // // // //       onClick={() => onChange({ 
// // // // // // // // // // // // // // // // // // //         target: { 
// // // // // // // // // // // // // // // // // // //           name, 
// // // // // // // // // // // // // // // // // // //           value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // // // // // // //         } 
// // // // // // // // // // // // // // // // // // //       })}
// // // // // // // // // // // // // // // // // // //       title="Select Sign"
// // // // // // // // // // // // // // // // // // //       aria-label="Toggle sign"
// // // // // // // // // // // // // // // // // // //     >
// // // // // // // // // // // // // // // // // // //       {value}
// // // // // // // // // // // // // // // // // // //     </button>
// // // // // // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // // // // // // // // // // //         <p className={styles.resultTitle}>Equation:</p>
// // // // // // // // // // // // // // // // // // //         <p className={styles.equation} dangerouslySetInnerHTML={renderKaTeX(result.equation)} />
        
// // // // // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // // // // //             <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // // // // // // //         <h1 className={styles.title}>Quadratic Equation Solver</h1>
        
// // // // // // // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // // // //         <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // // // // // // //           Solve
// // // // // // // // // // // // // // // // // // //         </button>

// // // // // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState({
// // // // // // // // // // // // // // // // // //     a: '0',
// // // // // // // // // // // // // // // // // //     b: '0',
// // // // // // // // // // // // // // // // // //     c: '0'
// // // // // // // // // // // // // // // // // //   });
  
// // // // // // // // // // // // // // // // // //   const [signs, setSigns] = useState({
// // // // // // // // // // // // // // // // // //     a: '+',
// // // // // // // // // // // // // // // // // //     b: '+',
// // // // // // // // // // // // // // // // // //     c: '+'
// // // // // // // // // // // // // // // // // //   });
  
// // // // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // // // //     const values = {
// // // // // // // // // // // // // // // // // //       a: coefficients.a === '' ? '0' : coefficients.a,
// // // // // // // // // // // // // // // // // //       b: coefficients.b === '' ? '0' : coefficients.b,
// // // // // // // // // // // // // // // // // //       c: coefficients.c === '' ? '0' : coefficients.c
// // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // //     const a = parseFloat(values.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // //     const b = parseFloat(values.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // // //     const c = parseFloat(values.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;
// // // // // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, values.a, true);
// // // // // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, values.b);
// // // // // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, values.c);

// // // // // // // // // // // // // // // // // //     equation = `${aStr || '1'}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`;

// // // // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // // // // // // // //       <button
// // // // // // // // // // // // // // // // // //         type="button"
// // // // // // // // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // // // // // // // //           target: { 
// // // // // // // // // // // // // // // // // //             name, 
// // // // // // // // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // // // // // //           } 
// // // // // // // // // // // // // // // // // //         })}
// // // // // // // // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // // // // // // // //       >
// // // // // // // // // // // // // // // // // //         {value}
// // // // // // // // // // // // // // // // // //       </button>
// // // // // // // // // // // // // // // // // //       <span className={styles.tooltipText}>Click to Switch Sign</span>
// // // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // // // // // // // // // //         <p className={styles.resultTitle}>Equation:</p>
// // // // // // // // // // // // // // // // // //         <p className={styles.equation} dangerouslySetInnerHTML={renderKaTeX(result.equation)} />
        
// // // // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // // // //             <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // // // // // //         <h1 className={styles.title}>Quadratic Equation Solver</h1>
        
// // // // // // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // // //         <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // // // // // //           Solve
// // // // // // // // // // // // // // // // // //         </button>

// // // // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // // //   const initialState = {
// // // // // // // // // // // // // // // // //     coefficients: { a: '0', b: '0', c: '0' },
// // // // // // // // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // // // // // // // //     // Convert to number and back to string to remove leading zeros
// // // // // // // // // // // // // // // // //     const num = Number(value);
// // // // // // // // // // // // // // // // //     return isNaN(num) ? '0' : num.toString();
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // //     // Normalize the number before setting it
// // // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // //       [name]: value === '' ? '0' : normalizeNumber(value)
// // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // // //     const values = {
// // // // // // // // // // // // // // // // //       a: coefficients.a === '' ? '0' : coefficients.a,
// // // // // // // // // // // // // // // // //       b: coefficients.b === '' ? '0' : coefficients.b,
// // // // // // // // // // // // // // // // //       c: coefficients.c === '' ? '0' : coefficients.c
// // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // //     const a = parseFloat(values.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // //     const b = parseFloat(values.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // // // //     const c = parseFloat(values.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;
// // // // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, values.a, true);
// // // // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, values.b);
// // // // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, values.c);

// // // // // // // // // // // // // // // // //     equation = `${aStr || '1'}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`;

// // // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // // // // // // // // //         equation
// // // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // // // // // // //       <button
// // // // // // // // // // // // // // // // //         type="button"
// // // // // // // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // // // // // // //           target: { 
// // // // // // // // // // // // // // // // //             name, 
// // // // // // // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // // // // //           } 
// // // // // // // // // // // // // // // // //         })}
// // // // // // // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // // // // // // //       >
// // // // // // // // // // // // // // // // //         {value}
// // // // // // // // // // // // // // // // //       </button>
// // // // // // // // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // // // // // // // // //         <p className={styles.resultTitle}>Equation:</p>
// // // // // // // // // // // // // // // // //         <p className={styles.equation} dangerouslySetInnerHTML={renderKaTeX(result.equation)} />
        
// // // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // // //             <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // // // // //         <h1 className={styles.title}>Quadratic Equation Solver</h1>
        
// // // // // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // // // // //             Solve
// // // // // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // // // // // // // //             Reset
// // // // // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // // //   const initialState = {
// // // // // // // // // // // // // // // //     coefficients: { a: '0', b: '0', c: '0' },
// // // // // // // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // // //   const [error, setError] = useState('');

// // // // // // // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // // // // // // //     const num = Number(value);
// // // // // // // // // // // // // // // //     return isNaN(num) ? '0' : num.toString();
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, coefficients.a, true);
// // // // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, coefficients.b);
// // // // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, coefficients.c);

// // // // // // // // // // // // // // // // //     return `${aStr || '1'}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`;
// // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // const getCurrentEquation = () => {
// // // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // // //         if (value === '1') return sign === '+' ? '' : '-';
// // // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // //       if (value === '1') return `${sign}`;
// // // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, coefficients.a, true);
// // // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, coefficients.b);
// // // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, coefficients.c);

// // // // // // // // // // // // // // // //     // If all coefficients are 0, return empty string
// // // // // // // // // // // // // // // //     if (!aStr && !bStr && !cStr) return '';

// // // // // // // // // // // // // // // //     return `${aStr}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`.trim();
// // // // // // // // // // // // // // // // };  

// // // // // // // // // // // // // // // // const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // //       [name]: value === '' ? '0' : normalizeNumber(value)
// // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // // //     const a = parseFloat(coefficients.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // // //     const b = parseFloat(coefficients.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // // //     const c = parseFloat(coefficients.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // // //         x2: x2.toFixed(4)
// // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // // //         imaginary: imaginaryPart
// // // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // // // // // //       <button
// // // // // // // // // // // // // // // //         type="button"
// // // // // // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // // // // // //           target: { 
// // // // // // // // // // // // // // // //             name, 
// // // // // // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // // // //           } 
// // // // // // // // // // // // // // // //         })}
// // // // // // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // // // // // //       >
// // // // // // // // // // // // // // // //         {value}
// // // // // // // // // // // // // // // //       </button>
// // // // // // // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // // //             <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // // //         )}
// // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // // // //         <div 
// // // // // // // // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // // // // // // // //         />
        
// // // // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // // // //             Solve
// // // // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // // // // // // //             Reset
// // // // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // // import React, { useState, useEffect } from 'react';
// // // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // // //   const initialState = {
// // // // // // // // // // // // // // //     coefficients: { a: '0', b: '0', c: '0' },
// // // // // // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // // // // // // //   const [activeTab, setActiveTab] = useState('real');

// // // // // // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // // // // // //     const num = Number(value);
// // // // // // // // // // // // // // //     return isNaN(num) ? '0' : num.toString();
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // //         if (value === '1') return sign === '+' ? '' : '-';
// // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //       if (value === '1') return `${sign}`;
// // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, coefficients.a, true);
// // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, coefficients.b);
// // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, coefficients.c);

// // // // // // // // // // // // // // //     if (!aStr && !bStr && !cStr) return '';
    
// // // // // // // // // // // // // // //     return `${aStr}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`.trim();
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // // //       })
// // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   useEffect(() => {
// // // // // // // // // // // // // // //     if (result) {
// // // // // // // // // // // // // // //       const hasComplexSolutions = result.type === 'complex';
// // // // // // // // // // // // // // //       setActiveTab(hasComplexSolutions ? 'complex' : 'real');
// // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // //   }, [result]);

// // // // // // // // // // // // // // //   const examples = {
// // // // // // // // // // // // // // //     real: [
// // // // // // // // // // // // // // //       {
// // // // // // // // // // // // // // //         coefficients: { a: '1', b: '5', c: '6' },
// // // // // // // // // // // // // // //         signs: { a: '+', b: '+', c: '+' },
// // // // // // // // // // // // // // //         description: "Equation: xÂ² + 5x + 6 = 0",
// // // // // // // // // // // // // // //         solutions: "Solutions: xâ = -2, xâ = -3"
// // // // // // // // // // // // // // //       },
// // // // // // // // // // // // // // //       {
// // // // // // // // // // // // // // //         coefficients: { a: '1', b: '7', c: '12' },
// // // // // // // // // // // // // // //         signs: { a: '+', b: '+', c: '+' },
// // // // // // // // // // // // // // //         description: "Equation: xÂ² + 7x + 12 = 0",
// // // // // // // // // // // // // // //         solutions: "Solutions: xâ = -3, xâ = -4"
// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //     ],
// // // // // // // // // // // // // // //     complex: [
// // // // // // // // // // // // // // //       {
// // // // // // // // // // // // // // //         coefficients: { a: '1', b: '0', c: '1' },
// // // // // // // // // // // // // // //         signs: { a: '+', b: '+', c: '+' },
// // // // // // // // // // // // // // //         description: "Equation: xÂ² + 1 = 0",
// // // // // // // // // // // // // // //         solutions: "Solutions: xâ = i, xâ = -i"
// // // // // // // // // // // // // // //       },
// // // // // // // // // // // // // // //       {
// // // // // // // // // // // // // // //         coefficients: { a: '1', b: '2', c: '5' },
// // // // // // // // // // // // // // //         signs: { a: '+', b: '+', c: '+' },
// // // // // // // // // // // // // // //         description: "Equation: xÂ² + 2x + 5 = 0",
// // // // // // // // // // // // // // //         solutions: "Solutions: xâ = -1 + 2i, xâ = -1 - 2i"
// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //     ]
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const handleExampleClick = (example) => {
// // // // // // // // // // // // // // //     setCoefficients(example.coefficients);
// // // // // // // // // // // // // // //     setSigns(example.signs);
// // // // // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // //       [name]: value === '' ? '0' : normalizeNumber(value)
// // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // // //     const a = parseFloat(coefficients.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // // //     const b = parseFloat(coefficients.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // // //     const c = parseFloat(coefficients.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // // //         x2: x2.toFixed(4)
// // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // // //         imaginary: imaginaryPart
// // // // // // // // // // // // // // //       });
// // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // // // // //       <button
// // // // // // // // // // // // // // //         type="button"
// // // // // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // // // // //           target: { 
// // // // // // // // // // // // // // //             name, 
// // // // // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // // //           } 
// // // // // // // // // // // // // // //         })}
// // // // // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // // // // //       >
// // // // // // // // // // // // // // //         {value}
// // // // // // // // // // // // // // //       </button>
// // // // // // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // //   );

// // // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // // //     return (
// // // // // // // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // // // // // // //           <>
// // // // // // // // // // // // // // //             <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // // //             <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // // //           </>
// // // // // // // // // // // // // // //         )}
        
// // // // // // // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // // // // // // //   <>
// // // // // // // // // // // // // // //     <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // // //     <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // // //     <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // // //   </>
// // // // // // // // // // // // // // // )}
// // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // //     );
// // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // // //         <div 
// // // // // // // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // // // // // // //         />
        
// // // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // // //             />
// // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // // //             Solve
// // // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // // // // // //             Reset
// // // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // // //         <div className={styles.tabContainer}>
// // // // // // // // // // // // // // //           <div className={styles.tabs}>
// // // // // // // // // // // // // // //             <button 
// // // // // // // // // // // // // // //               className={`${styles.tab} ${activeTab === 'real' ? styles.active : ''}`}
// // // // // // // // // // // // // // //               onClick={() => setActiveTab('real')}
// // // // // // // // // // // // // // //             >
// // // // // // // // // // // // // // //               Real Solutions
// // // // // // // // // // // // // // //             </button>
// // // // // // // // // // // // // // //             <button 
// // // // // // // // // // // // // // //               className={`${styles.tab} ${activeTab === 'complex' ? styles.active : ''}`}
// // // // // // // // // // // // // // //               onClick={() => setActiveTab('complex')}
// // // // // // // // // // // // // // //             >
// // // // // // // // // // // // // // //               Complex Solutions
// // // // // // // // // // // // // // //             </button>
// // // // // // // // // // // // // // //           </div>

// // // // // // // // // // // // // // //           <div className={`${styles.tabContent} ${activeTab === 'real' ? styles.active : ''}`}>
// // // // // // // // // // // // // // //             <p>Examples of equations with real solutions:</p>
// // // // // // // // // // // // // // //             {examples.real.map((example, index) => (
// // // // // // // // // // // // // // //               <div key={index} className={styles.exampleContainer}>
// // // // // // // // // // // // // // //                 <p className={styles.exampleEquation}>{example.description}</p>
// // // // // // // // // // // // // // //                 <p>{example.solutions}</p>
// // // // // // // // // // // // // // //                 <button 
// // // // // // // // // // // // // // //                   className={styles.tryItButton}
// // // // // // // // // // // // // // //                   onClick={() => handleExampleClick(example)}
// // // // // // // // // // // // // // //                 >
// // // // // // // // // // // // // // //                   Try this example
// // // // // // // // // // // // // // //                 </button>
// // // // // // // // // // // // // // //               </div>
// // // // // // // // // // // // // // //             ))}
// // // // // // // // // // // // // // //           </div>

// // // // // // // // // // // // // // //           <div className={`${styles.tabContent} ${activeTab === 'complex' ? styles.active : ''}`}>
// // // // // // // // // // // // // // //             <p>Examples of equations with complex solutions:</p>
// // // // // // // // // // // // // // //             {examples.complex.map((example, index) => (
// // // // // // // // // // // // // // //               <div key={index} className={styles.exampleContainer}>
// // // // // // // // // // // // // // //                 <p className={styles.exampleEquation}>{example.description}</p>
// // // // // // // // // // // // // // //                 <p>{example.solutions}</p>
// // // // // // // // // // // // // // //                 <button 
// // // // // // // // // // // // // // //                   className={styles.tryItButton}
// // // // // // // // // // // // // // //                   onClick={() => handleExampleClick(example)}
// // // // // // // // // // // // // // //                 >
// // // // // // // // // // // // // // //                   Try this example
// // // // // // // // // // // // // // //                 </button>
// // // // // // // // // // // // // // //               </div>
// // // // // // // // // // // // // // //             ))}
// // // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // //   const initialState = {
// // // // // // // // // // // // // //     coefficients: { a: '0', b: '0', c: '0' },
// // // // // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // // // // //     const num = Number(value);
// // // // // // // // // // // // // //     return isNaN(num) ? '0' : num.toString();
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // // //         if (value === '1') return sign === '+' ? '' : '-';
// // // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //       if (value === '1') return `${sign}`;
// // // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, coefficients.a, true);
// // // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, coefficients.b);
// // // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, coefficients.c);

// // // // // // // // // // // // // // //     if (!aStr && !bStr && !cStr) return '';
    
// // // // // // // // // // // // // // //     return `${aStr}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`.trim();
// // // // // // // // // // // // // // //   };

 
// // // // // // // // // // // // // // const getCurrentEquation = () => {
// // // // // // // // // // // // // //     const formatCoef = (sign, value, isFirst = false) => {
// // // // // // // // // // // // // //       if (value === '0') return '';
// // // // // // // // // // // // // //       if (isFirst) {
// // // // // // // // // // // // // //         if (value === '1') return sign === '+' ? '' : '-';
// // // // // // // // // // // // // //         return sign === '+' ? value : `-${value}`;
// // // // // // // // // // // // // //       }
// // // // // // // // // // // // // //       if (value === '1') return `${sign}`;
// // // // // // // // // // // // // //       return `${sign}${value}`;
// // // // // // // // // // // // // //     };

// // // // // // // // // // // // // //     const aStr = formatCoef(signs.a, coefficients.a, true);
// // // // // // // // // // // // // //     const bStr = formatCoef(signs.b, coefficients.b);
// // // // // // // // // // // // // //     const cStr = formatCoef(signs.c, coefficients.c);

// // // // // // // // // // // // // //     // Don't show equation if a is 0 (not a quadratic equation)
// // // // // // // // // // // // // //     if (coefficients.a === '0') return '';
    
// // // // // // // // // // // // // //     // Don't show if all coefficients are 0
// // // // // // // // // // // // // //     if (!aStr && !bStr && !cStr) return '';
    
// // // // // // // // // // // // // //     return `${aStr}x^2 ${bStr ? `${bStr}x` : ''} ${cStr} = 0`.trim();
// // // // // // // // // // // // // // };

// // // // // // // // // // // // // // const renderKaTeX = (tex) => {
// // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // //       })
// // // // // // // // // // // // // //     };
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // //       [name]: value === '' ? '0' : normalizeNumber(value)
// // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // // // //     const a = parseFloat(coefficients.a) * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // //     const b = parseFloat(coefficients.b) * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // //     const c = parseFloat(coefficients.c) * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // //     setError('');

// // // // // // // // // // // // // //     if (isNaN(a) || isNaN(b) || isNaN(c)) {
// // // // // // // // // // // // // //       setError('Please enter valid numbers for coefficients');
// // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     if (a === 0) {
// // // // // // // // // // // // // //       setError('This is not a quadratic equation (coefficient of xÂ² is zero)');
// // // // // // // // // // // // // //       return;
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // // //         x2: x2.toFixed(4)
// // // // // // // // // // // // // //       });
// // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // // // // //       });
// // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // // //         real: realPart,
// // // // // // // // // // // // // //         imaginary: imaginaryPart
// // // // // // // // // // // // // //       });
// // // // // // // // // // // // // //     }
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // // // //       <button
// // // // // // // // // // // // // //         type="button"
// // // // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // // // //           target: { 
// // // // // // // // // // // // // //             name, 
// // // // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // //           } 
// // // // // // // // // // // // // //         })}
// // // // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // // // //       >
// // // // // // // // // // // // // //         {value}
// // // // // // // // // // // // // //       </button>
// // // // // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // //   );

// // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // //     if (result.type === 'real') {
// // // // // // // // // // // // // //       return (
// // // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // // //           <p className={styles.resultTitle}>Solutions:</p>
// // // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // //         </div>
// // // // // // // // // // // // // //       );
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     if (result.type === 'equal') {
// // // // // // // // // // // // // //       return (
// // // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // // //           <p className={styles.resultTitle}>Solution:</p>
// // // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // //           <p className={styles.note}>(Double root)</p>
// // // // // // // // // // // // // //         </div>
// // // // // // // // // // // // // //       );
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     if (result.type === 'complex') {
// // // // // // // // // // // // // //       return (
// // // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // // //           <p className={styles.noSolutionMessage}>
// // // // // // // // // // // // // //             There are no real numbers solution for this equation
// // // // // // // // // // // // // //           </p>
// // // // // // // // // // // // // //           {!showComplexSolution ? (
// // // // // // // // // // // // // //             <button 
// // // // // // // // // // // // // //               onClick={handleShowComplexSolution}
// // // // // // // // // // // // // //               className={styles.showComplexButton}
// // // // // // // // // // // // // //             >
// // // // // // // // // // // // // //               Show complex solutions
// // // // // // // // // // // // // //             </button>
// // // // // // // // // // // // // //           ) : (
// // // // // // // // // // // // // //             <>
// // // // // // // // // // // // // //               <p className={styles.resultTitle}>Complex Solutions:</p>
// // // // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // //             </>
// // // // // // // // // // // // // //           )}
// // // // // // // // // // // // // //         </div>
// // // // // // // // // // // // // //       );
// // // // // // // // // // // // // //     }
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // //         <div 
// // // // // // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // // // // // //         />
        
// // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // //             Solve
// // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // // // // //             Reset
// // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // //         </div>

      

// // // // // // // // // // // // // // {error && (
// // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // };

// // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // // //   const initialState = {
// // // // // // // // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // // // // //     if (value === '') return '';
// // // // // // // // // // // // // //     const num = parseFloat(value);
// // // // // // // // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c === '') return '';

// // // // // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // // // // // // // //       const absNum = Math.abs(num);
// // // // // // // // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // // // // // // // //       return `${sign}${numStr}`;
// // // // // // // // // // // // // //     };

// // // // // // // // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // // // // // // // //     equation += ' = 0';

// // // // // // // // // // // // // //     return equation.trim();
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // // //     return {
// // // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // // //       })
// // // // // // // // // // // // // //     };
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // //     setCoefficients(prev => ({
// // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // //       [name]: normalizeNumber(value)
// // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // // //     }));
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // // //     setResult(null);

// // // // // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // // //     // Case: a=b=0, câ 0 -> Error
// // // // // // // // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // // // // // // // //         setError(`Error: ${c === 1 ? '' : c}${c < 0 ? '-' : ''}${Math.abs(c)} = 0 makes no sense`);
// // // // // // // // // // // // // //         return;
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     // Case: Linear equation (a=0, bâ 0)
// // // // // // // // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // // // // // // // //         const x = -c / b;
// // // // // // // // // // // // // //         setResult({
// // // // // // // // // // // // // //             type: 'linear',
// // // // // // // // // // // // // //             x: x.toFixed(4)
// // // // // // // // // // // // // //         });
// // // // // // // // // // // // // //         return;
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     // Case: Quadratic equation
// // // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // // //         const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // //         const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // // //         setResult({
// // // // // // // // // // // // // //             type: 'real',
// // // // // // // // // // // // // //             x1: x1.toFixed(4),
// // // // // // // // // // // // // //             x2: x2.toFixed(4)
// // // // // // // // // // // // // //         });
// // // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // // //         const x = -b / (2 * a);
// // // // // // // // // // // // // //         setResult({
// // // // // // // // // // // // // //             type: 'equal',
// // // // // // // // // // // // // //             x: x.toFixed(4)
// // // // // // // // // // // // // //         });
// // // // // // // // // // // // // //     } else {
// // // // // // // // // // // // // //         const realPart = (-b / (2 * a));
// // // // // // // // // // // // // //         const imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
// // // // // // // // // // // // // //         setResult({
// // // // // // // // // // // // // //             type: 'complex',
// // // // // // // // // // // // // //             real: realPart.toFixed(4),
// // // // // // // // // // // // // //             imaginary: imaginaryPart.toFixed(4)
// // // // // // // // // // // // // //         });
// // // // // // // // // // // // // //     }
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // // // //       <button
// // // // // // // // // // // // // //         type="button"
// // // // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // // // //           target: { 
// // // // // // // // // // // // // //             name, 
// // // // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // // //           } 
// // // // // // // // // // // // // //         })}
// // // // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // // // //       >
// // // // // // // // // // // // // //         {value}
// // // // // // // // // // // // // //       </button>
// // // // // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // //   );

// // // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // // //     if (result.type === 'linear') {
// // // // // // // // // // // // // //       return (
// // // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // //         </div>
// // // // // // // // // // // // // //       );
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     if (result.type === 'real') {
// // // // // // // // // // // // // //       return (
// // // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // // //         </div>
// // // // // // // // // // // // // //       );
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     if (result.type === 'equal') {
// // // // // // // // // // // // // //       return (
// // // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // // //         </div>
// // // // // // // // // // // // // //       );
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     if (result.type === 'complex') {
// // // // // // // // // // // // // //       return (
// // // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // // //           <p className={styles.noSolutionMessage}>
// // // // // // // // // // // // // //             There are no real number solutions for this equation
// // // // // // // // // // // // // //           </p>
// // // // // // // // // // // // // //           {!showComplexSolution ? (
// // // // // // // // // // // // // //             <button 
// // // // // // // // // // // // // //               onClick={handleShowComplexSolution}
// // // // // // // // // // // // // //               className={styles.showComplexButton}
// // // // // // // // // // // // // //             >
// // // // // // // // // // // // // //               Show complex solutions
// // // // // // // // // // // // // //             </button>
// // // // // // // // // // // // // //           ) : (
// // // // // // // // // // // // // //             <>
// // // // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // // //             </>
// // // // // // // // // // // // // //           )}
// // // // // // // // // // // // // //         </div>
// // // // // // // // // // // // // //       );
// // // // // // // // // // // // // //     }
// // // // // // // // // // // // // //   };

// // // // // // // // // // // // // //   return (
// // // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // // //         <div 
// // // // // // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // // // // // //         />
        
// // // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //             <input
// // // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // // //             />
// // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // // //             Solve
// // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // // // // //             Reset
// // // // // // // // // // // // // //           </button>
// // // // // // // // // // // // // //         </div>

// // // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // // //             {error}
// // // // // // // // // // // // // //           </div>
// // // // // // // // // // // // // //         )}

// // // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // // //       </div>
// // // // // // // // // // // // // //     </div>
// // // // // // // // // // // // // //   );
// // // // // // // // // // // // // // };

// // // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // // //   const initialState = {
// // // // // // // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // // // //     if (value === '') return '';
// // // // // // // // // // // // //     const num = parseFloat(value);
// // // // // // // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // //     // Return empty string if no coefficients are entered
// // // // // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c === '') {
// // // // // // // // // // // // //       return '';
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     // Return error message if only c is entered
// // // // // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // // // // //       return '';
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // // // // // // //       const absNum = Math.abs(num);
// // // // // // // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // // // // // // //       return `${sign}${numStr}`;
// // // // // // // // // // // // //     };

// // // // // // // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // // // // // // //     equation += ' = 0';

// // // // // // // // // // // // //     return equation.trim();
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // // //     return {
// // // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // // //       })
// // // // // // // // // // // // //     };
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // //     const newCoefficients = {
// // // // // // // // // // // // //       ...coefficients,
// // // // // // // // // // // // //       [name]: normalizeNumber(value)
// // // // // // // // // // // // //     };
// // // // // // // // // // // // //     setCoefficients(newCoefficients);
    
// // // // // // // // // // // // //     // Clear error when user starts typing new values
// // // // // // // // // // // // //     setError('');
    
// // // // // // // // // // // // //     // Show error immediately if only c is entered
// // // // // // // // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // // // //     }
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // // //       ...prev,
// // // // // // // // // // // // //       [name]: value
// // // // // // // // // // // // //     }));
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // // //     setError('');
// // // // // // // // // // // // //     setResult(null);

// // // // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // // //     // Case: only c is entered
// // // // // // // // // // // // //     if (a === 0 && b === 0 && coefficients.c !== '') {
// // // // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // // // //       return;
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     // Case: a=b=0, câ 0 -> Error
// // // // // // // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // // // //       return;
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     // Case: Linear equation (a=0, bâ 0)
// // // // // // // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // // // // // // //       const x = -c / b;
// // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // //         type: 'linear',
// // // // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // // // //       });
// // // // // // // // // // // // //       return;
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     // Case: Quadratic equation
// // // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // // //         x2: x2.toFixed(4)
// // // // // // // // // // // // //       });
// // // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // // // //       });
// // // // // // // // // // // // //     } else {
// // // // // // // // // // // // //       const realPart = (-b / (2 * a));
// // // // // // // // // // // // //       const imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
// // // // // // // // // // // // //       setResult({
// // // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // // //         real: realPart.toFixed(4),
// // // // // // // // // // // // //         imaginary: imaginaryPart.toFixed(4)
// // // // // // // // // // // // //       });
// // // // // // // // // // // // //     }
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // // //       <button
// // // // // // // // // // // // //         type="button"
// // // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // // //           target: { 
// // // // // // // // // // // // //             name, 
// // // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // // //           } 
// // // // // // // // // // // // //         })}
// // // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // // //       >
// // // // // // // // // // // // //         {value}
// // // // // // // // // // // // //       </button>
// // // // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // // // //     </div>
// // // // // // // // // // // // //   );

// // // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // // //     if (result.type === 'linear') {
// // // // // // // // // // // // //       return (
// // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // //         </div>
// // // // // // // // // // // // //       );
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     if (result.type === 'real') {
// // // // // // // // // // // // //       return (
// // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // // //         </div>
// // // // // // // // // // // // //       );
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     if (result.type === 'equal') {
// // // // // // // // // // // // //       return (
// // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // // //         </div>
// // // // // // // // // // // // //       );
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     if (result.type === 'complex') {
// // // // // // // // // // // // //       return (
// // // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // // //           <p className={styles.noSolutionMessage}>
// // // // // // // // // // // // //             There are no real number solutions for this equation
// // // // // // // // // // // // //           </p>
// // // // // // // // // // // // //           {!showComplexSolution ? (
// // // // // // // // // // // // //             <button 
// // // // // // // // // // // // //               onClick={handleShowComplexSolution}
// // // // // // // // // // // // //               className={styles.showComplexButton}
// // // // // // // // // // // // //             >
// // // // // // // // // // // // //               Show complex solutions
// // // // // // // // // // // // //             </button>
// // // // // // // // // // // // //           ) : (
// // // // // // // // // // // // //             <>
// // // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // // //             </>
// // // // // // // // // // // // //           )}
// // // // // // // // // // // // //         </div>
// // // // // // // // // // // // //       );
// // // // // // // // // // // // //     }
// // // // // // // // // // // // //   };

// // // // // // // // // // // // //   return (
// // // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // // //         <div 
// // // // // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // // // // //         />
        
// // // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // //             />
// // // // // // // // // // // // //             <input
// // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // //               name="a"
// // // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // //             />
// // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // //             />
// // // // // // // // // // // // //             <input
// // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // //               name="b"
// // // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // //             />
// // // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // // //           </div>
          
// // // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // // //             />
// // // // // // // // // // // // //             <input
// // // // // // // // // // // // //               type="number"
// // // // // // // // // // // // //               name="c"
// // // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // // //             />
// // // // // // // // // // // // //           </div>
// // // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // // //         </div>

// // // // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // // //             Solve
// // // // // // // // // // // // //           </button>
// // // // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // // // //             Reset
// // // // // // // // // // // // //           </button>
// // // // // // // // // // // // //         </div>

// // // // // // // // // // // // //         {error && (
// // // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // // //             {error}
// // // // // // // // // // // // //           </div>
// // // // // // // // // // // // //         )}

// // // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // // //       </div>
// // // // // // // // // // // // //     </div>
// // // // // // // // // // // // //   );
// // // // // // // // // // // // // };

// // // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // // //   const initialState = {
// // // // // // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // // //     if (value === '') return '';
// // // // // // // // // // // //     const num = parseFloat(value);
// // // // // // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const hasAnyCoefficient = () => {
// // // // // // // // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // // // //     // Don't display equation if there are no coefficients
// // // // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // // // //       return '';
// // // // // // // // // // // //     }

// // // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // //     // Return empty string if only c is entered
// // // // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // // // //       return '';
// // // // // // // // // // // //     }

// // // // // // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // // // // // //       const absNum = Math.abs(num);
// // // // // // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // // // // // //       return `${sign}${numStr}`;
// // // // // // // // // // // //     };

// // // // // // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // // // // // //     let equation = '';
// // // // // // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // // // // // //     equation += ' = 0';

// // // // // // // // // // // //     return equation.trim();
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // // //     if (!tex) return { __html: '' };
// // // // // // // // // // // //     return {
// // // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // // //         displayMode: false
// // // // // // // // // // // //       })
// // // // // // // // // // // //     };
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // //     const newCoefficients = {
// // // // // // // // // // // //       ...coefficients,
// // // // // // // // // // // //       [name]: normalizeNumber(value)
// // // // // // // // // // // //     };
// // // // // // // // // // // //     setCoefficients(newCoefficients);
// // // // // // // // // // // //     setError('');
    
// // // // // // // // // // // //     // Show error immediately if only c is entered
// // // // // // // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // // //     }
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // // //       ...prev,
// // // // // // // // // // // //       [name]: value
// // // // // // // // // // // //     }));
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // // //     setResult(null);
// // // // // // // // // // // //     setError('');
// // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const validateInputs = () => {
// // // // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // // // //       setError('Please enter at least one coefficient');
// // // // // // // // // // // //       return false;
// // // // // // // // // // // //     }

// // // // // // // // // // // //     // Case: only c is entered
// // // // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // // //       return false;
// // // // // // // // // // // //     }

// // // // // // // // // // // //     return true;
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // // //     setError('');
// // // // // // // // // // // //     setResult(null);

// // // // // // // // // // // //     if (!validateInputs()) {
// // // // // // // // // // // //       return;
// // // // // // // // // // // //     }

// // // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // // //     // Case: a=b=0, câ 0
// // // // // // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // // //       return;
// // // // // // // // // // // //     }

// // // // // // // // // // // //     // Case: Linear equation (a=0, bâ 0)
// // // // // // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // // // // // //       const x = -c / b;
// // // // // // // // // // // //       setResult({
// // // // // // // // // // // //         type: 'linear',
// // // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // // //       });
// // // // // // // // // // // //       return;
// // // // // // // // // // // //     }

// // // // // // // // // // // //     // Case: Quadratic equation
// // // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // // //       setResult({
// // // // // // // // // // // //         type: 'real',
// // // // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // // // //         x2: x2.toFixed(4)
// // // // // // // // // // // //       });
// // // // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // // // //       setResult({
// // // // // // // // // // // //         type: 'equal',
// // // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // // //       });
// // // // // // // // // // // //     } else {
// // // // // // // // // // // //       const realPart = (-b / (2 * a));
// // // // // // // // // // // //       const imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
// // // // // // // // // // // //       setResult({
// // // // // // // // // // // //         type: 'complex',
// // // // // // // // // // // //         real: realPart.toFixed(4),
// // // // // // // // // // // //         imaginary: imaginaryPart.toFixed(4)
// // // // // // // // // // // //       });
// // // // // // // // // // // //     }
// // // // // // // // // // // //   };

// // // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // // //       <button
// // // // // // // // // // // //         type="button"
// // // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // // //           target: { 
// // // // // // // // // // // //             name, 
// // // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // // //           } 
// // // // // // // // // // // //         })}
// // // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // // //       >
// // // // // // // // // // // //         {value}
// // // // // // // // // // // //       </button>
// // // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // // //     </div>
// // // // // // // // // // // //   );

// // // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // // //     if (result.type === 'linear') {
// // // // // // // // // // // //       return (
// // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // //         </div>
// // // // // // // // // // // //       );
// // // // // // // // // // // //     }

// // // // // // // // // // // //     if (result.type === 'real') {
// // // // // // // // // // // //       return (
// // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // // //         </div>
// // // // // // // // // // // //       );
// // // // // // // // // // // //     }

// // // // // // // // // // // //     if (result.type === 'equal') {
// // // // // // // // // // // //       return (
// // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // // //         </div>
// // // // // // // // // // // //       );
// // // // // // // // // // // //     }

// // // // // // // // // // // //     if (result.type === 'complex') {
// // // // // // // // // // // //       return (
// // // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // // //           <p className={styles.noSolutionMessage}>
// // // // // // // // // // // //             There are no real number solutions for this equation
// // // // // // // // // // // //           </p>
// // // // // // // // // // // //           {!showComplexSolution ? (
// // // // // // // // // // // //             <button 
// // // // // // // // // // // //               onClick={handleShowComplexSolution}
// // // // // // // // // // // //               className={styles.showComplexButton}
// // // // // // // // // // // //             >
// // // // // // // // // // // //               Show complex solutions
// // // // // // // // // // // //             </button>
// // // // // // // // // // // //           ) : (
// // // // // // // // // // // //             <>
// // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // // //             </>
// // // // // // // // // // // //           )}
// // // // // // // // // // // //         </div>
// // // // // // // // // // // //       );
// // // // // // // // // // // //     }
// // // // // // // // // // // //   };

// // // // // // // // // // // //   return (
// // // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // // //         <div 
// // // // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // // // //         />
        
// // // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // //               name="a"
// // // // // // // // // // // //               value={signs.a}
// // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // //             />
// // // // // // // // // // // //             <input
// // // // // // // // // // // //               type="number"
// // // // // // // // // // // //               name="a"
// // // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // //             />
// // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // // //           </div>
          
// // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // //               name="b"
// // // // // // // // // // // //               value={signs.b}
// // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // //             />
// // // // // // // // // // // //             <input
// // // // // // // // // // // //               type="number"
// // // // // // // // // // // //               name="b"
// // // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // //             />
// // // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // // //           </div>
          
// // // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // // //             <SignToggle
// // // // // // // // // // // //               name="c"
// // // // // // // // // // // //               value={signs.c}
// // // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // // //             />
// // // // // // // // // // // //             <input
// // // // // // // // // // // //               type="number"
// // // // // // // // // // // //               name="c"
// // // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // // //               placeholder="0"
// // // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // // //             />
// // // // // // // // // // // //           </div>
// // // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // // //         </div>

// // // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // // //             Solve
// // // // // // // // // // // //           </button>
// // // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // // //             Reset
// // // // // // // // // // // //           </button>
// // // // // // // // // // // //         </div>

// // // // // // // // // // // //         {error && (
// // // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // // //             {error}
// // // // // // // // // // // //           </div>
// // // // // // // // // // // //         )}

// // // // // // // // // // // //         {renderResult()}
// // // // // // // // // // // //       </div>
// // // // // // // // // // // //     </div>
// // // // // // // // // // // //   );
// // // // // // // // // // // // };

// // // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // // import katex from 'katex';
// // // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // // //   const initialState = {
// // // // // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // // //   };

// // // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);
// // // // // // // // // // //   const [explanation, setExplanation] = useState([]);

// // // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // // //     if (value === '') return '';
// // // // // // // // // // //     const num = parseFloat(value);
// // // // // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // // // // //   };

// // // // // // // // // // //   const hasAnyCoefficient = () => {
// // // // // // // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // // // // // // //   };

// // // // // // // // // // //   const formatNumber = (num) => {
// // // // // // // // // // //     if (num === 0) return '0';
// // // // // // // // // // //     if (num === 1) return '';
// // // // // // // // // // //     if (num === -1) return '-';
// // // // // // // // // // //     return num.toString();
// // // // // // // // // // //   };

// // // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // // //       return '';
// // // // // // // // // // //     }

// // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // // //       return '';
// // // // // // // // // // //     }

// // // // // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // // // // //       const absNum = Math.abs(num);
// // // // // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // // // // //       return `${sign}${numStr}`;
// // // // // // // // // // //     };

// // // // // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // // // // //     let equation = '';
// // // // // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // // // // //     equation += ' = 0';

// // // // // // // // // // //     return equation.trim();
// // // // // // // // // // //   };

// // // // // // // // // // //   const generateExplanation = (result, a, b, c) => {
// // // // // // // // // // //     if (result.type === 'linear') {
// // // // // // // // // // //       return [
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "This is a linear equation in the form:",
// // // // // // // // // // //           math: "bx + c = 0"
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Move all terms to left side:",
// // // // // // // // // // //           math: `${b}x + ${c} = 0`
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Subtract c from both sides:",
// // // // // // // // // // //           math: `${b}x = ${-c}`
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Divide both sides by b:",
// // // // // // // // // // //           math: `x = ${result.x}`
// // // // // // // // // // //         }
// // // // // // // // // // //       ];
// // // // // // // // // // //     }

// // // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // // //     if (result.type === 'real' || result.type === 'equal') {
// // // // // // // // // // //       return [
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "This is a quadratic equation in the form:",
// // // // // // // // // // //           math: "ax^2 + bx + c = 0"
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Using the quadratic formula: x = (-b Â± â(bÂ² - 4ac)) / (2a)",
// // // // // // // // // // //           math: "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}"
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Substitute the values:",
// // // // // // // // // // //           math: `x = \\frac{${-b} \\pm \\sqrt{(${b})^2 - 4(${a})(${c})}}{2(${a})}`
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Calculate the discriminant (bÂ² - 4ac):",
// // // // // // // // // // //           math: `\\text{discriminant} = ${discriminant}`
// // // // // // // // // // //         },
// // // // // // // // // // //         ...(result.type === 'equal' ? [
// // // // // // // // // // //           {
// // // // // // // // // // //             text: "Since the discriminant is zero, there is exactly one solution:",
// // // // // // // // // // //             math: `x = ${result.x}`
// // // // // // // // // // //           }
// // // // // // // // // // //         ] : [
// // // // // // // // // // //           {
// // // // // // // // // // //             text: "Since the discriminant is positive, there are two real solutions:",
// // // // // // // // // // //             math: `x_1 = ${result.x1}, x_2 = ${result.x2}`
// // // // // // // // // // //           }
// // // // // // // // // // //         ])
// // // // // // // // // // //       ];
// // // // // // // // // // //     }

// // // // // // // // // // //     if (result.type === 'complex') {
// // // // // // // // // // //       return [
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "This is a quadratic equation in the form:",
// // // // // // // // // // //           math: "ax^2 + bx + c = 0"
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Using the quadratic formula: x = (-b Â± â(bÂ² - 4ac)) / (2a)",
// // // // // // // // // // //           math: "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}"
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Substitute the values:",
// // // // // // // // // // //           math: `x = \\frac{${-b} \\pm \\sqrt{(${b})^2 - 4(${a})(${c})}}{2(${a})}`
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Calculate the discriminant (bÂ² - 4ac):",
// // // // // // // // // // //           math: `\\text{discriminant} = ${discriminant}`
// // // // // // // // // // //         },
// // // // // // // // // // //         {
// // // // // // // // // // //           text: "Since the discriminant is negative, the solutions are complex:",
// // // // // // // // // // //           math: `x_{1,2} = ${result.real} \\pm ${result.imaginary}i`
// // // // // // // // // // //         }
// // // // // // // // // // //       ];
// // // // // // // // // // //     }

// // // // // // // // // // //     return [];
// // // // // // // // // // //   };

// // // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // // //     if (!tex) return { __html: '' };
// // // // // // // // // // //     return {
// // // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // // //         throwOnError: false,
// // // // // // // // // // //         displayMode: false
// // // // // // // // // // //       })
// // // // // // // // // // //     };
// // // // // // // // // // //   };

// // // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // //     const newCoefficients = {
// // // // // // // // // // //       ...coefficients,
// // // // // // // // // // //       [name]: normalizeNumber(value)
// // // // // // // // // // //     };
// // // // // // // // // // //     setCoefficients(newCoefficients);
// // // // // // // // // // //     setError('');
// // // // // // // // // // //     setExplanation([]);
    
// // // // // // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // //     }
// // // // // // // // // // //   };

// // // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // // //       ...prev,
// // // // // // // // // // //       [name]: value
// // // // // // // // // // //     }));
// // // // // // // // // // //   };

// // // // // // // // // // //   const handleReset = () => {
// // // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // // //     setResult(null);
// // // // // // // // // // //     setError('');
// // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // //     setExplanation([]);
// // // // // // // // // // //   };

// // // // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // // // //   };

// // // // // // // // // // //   const validateInputs = () => {
// // // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // // //       setError('Please enter at least one coefficient');
// // // // // // // // // // //       return false;
// // // // // // // // // // //     }

// // // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // //       return false;
// // // // // // // // // // //     }

// // // // // // // // // // //     return true;
// // // // // // // // // // //   };

// // // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // // //     setError('');
// // // // // // // // // // //     setResult(null);
// // // // // // // // // // //     setExplanation([]);

// // // // // // // // // // //     if (!validateInputs()) {
// // // // // // // // // // //       return;
// // // // // // // // // // //     }

// // // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // // //       return;
// // // // // // // // // // //     }

// // // // // // // // // // //     let newResult;

// // // // // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // // // // //       const x = -c / b;
// // // // // // // // // // //       newResult = {
// // // // // // // // // // //         type: 'linear',
// // // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // // //       };
// // // // // // // // // // //     } else {
// // // // // // // // // // //       const discriminant = b * b - 4 * a * c;

// // // // // // // // // // //       if (discriminant > 0) {
// // // // // // // // // // //         const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // //         const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // // //         newResult = {
// // // // // // // // // // //           type: 'real',
// // // // // // // // // // //           x1: x1.toFixed(4),
// // // // // // // // // // //           x2: x2.toFixed(4)
// // // // // // // // // // //         };
// // // // // // // // // // //       } else if (discriminant === 0) {
// // // // // // // // // // //         const x = -b / (2 * a);
// // // // // // // // // // //         newResult = {
// // // // // // // // // // //           type: 'equal',
// // // // // // // // // // //           x: x.toFixed(4)
// // // // // // // // // // //         };
// // // // // // // // // // //       } else {
// // // // // // // // // // //         const realPart = (-b / (2 * a));
// // // // // // // // // // //         const imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
// // // // // // // // // // //         newResult = {
// // // // // // // // // // //           type: 'complex',
// // // // // // // // // // //           real: realPart.toFixed(4),
// // // // // // // // // // //           imaginary: imaginaryPart.toFixed(4)
// // // // // // // // // // //         };
// // // // // // // // // // //       }
// // // // // // // // // // //     }

// // // // // // // // // // //     setResult(newResult);
// // // // // // // // // // //     setExplanation(generateExplanation(newResult, a, b, c));
// // // // // // // // // // //   };

// // // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // // //       <button
// // // // // // // // // // //         type="button"
// // // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // // //           target: { 
// // // // // // // // // // //             name, 
// // // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // // //           } 
// // // // // // // // // // //         })}
// // // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // // //       >
// // // // // // // // // // //         {value}
// // // // // // // // // // //       </button>
// // // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // // //     </div>
// // // // // // // // // // //   );

// // // // // // // // // // //   const renderResult = () => {
// // // // // // // // // // //     if (!result) return null;

// // // // // // // // // // //     if (result.type === 'linear') {
// // // // // // // // // // //       return (
// // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // //         </div>
// // // // // // // // // // //       );
// // // // // // // // // // //     }

// // // // // // // // // // //     if (result.type === 'real') {
// // // // // // // // // // //       return (
// // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // // //         </div>
// // // // // // // // // // //       );
// // // // // // // // // // //     }

// // // // // // // // // // //     if (result.type === 'equal') {
// // // // // // // // // // //       return (
// // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // // //         </div>
// // // // // // // // // // //       );
// // // // // // // // // // //     }

// // // // // // // // // // //     if (result.type === 'complex') {
// // // // // // // // // // //       return (
// // // // // // // // // // //         <div className={styles.result}>
// // // // // // // // // // //           <p className={styles.noSolutionMessage}>
// // // // // // // // // // //             There are no real number solutions for this equation
// // // // // // // // // // //           </p>
// // // // // // // // // // //           {!showComplexSolution ? (
// // // // // // // // // // //             <button 
// // // // // // // // // // //               onClick={handleShowComplexSolution}
// // // // // // // // // // //               className={styles.showComplexButton}
// // // // // // // // // // //             >
// // // // // // // // // // //               Show complex solutions
// // // // // // // // // // //             </button>
// // // // // // // // // // //           ) : (
// // // // // // // // // // //             <>
// // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // // //             </>
// // // // // // // // // // //           )}
// // // // // // // // // // //         </div>
// // // // // // // // // // //       );
// // // // // // // // // // //     }
// // // // // // // // // // //   };

// // // // // // // // // // //   return (
// // // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // // //         <div 
// // // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // // //         />
        
// // // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // //             <SignToggle
// // // // // // // // // // //               name="a"
// // // // // // // // // // //               value={signs.a}
// // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // //             />
// // // // // // // // // // //             <input
// // // // // // // // // // //               type="number"
// // // // // // // // // // //               name="a"
// // // // // // // // // // //               value={coefficients.a}
// // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // //               placeholder="0"
// // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // //             />
// // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // // //           </div>
          
// // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // //             <SignToggle
// // // // // // // // // // //               name="b"
// // // // // // // // // // //               value={signs.b}
// // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // //             />
// // // // // // // // // // //             <input
// // // // // // // // // // //               type="number"
// // // // // // // // // // //               name="b"
// // // // // // // // // // //               value={coefficients.b}
// // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // //               placeholder="0"
// // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // //             />
// // // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // // //           </div>
          
// // // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // // //             <SignToggle
// // // // // // // // // // //               name="c"
// // // // // // // // // // //               value={signs.c}
// // // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // // //             />
// // // // // // // // // // //             <input
// // // // // // // // // // //               type="number"
// // // // // // // // // // //               name="c"
// // // // // // // // // // //               value={coefficients.c}
// // // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // // //               placeholder="0"
// // // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // // //             />
// // // // // // // // // // //           </div>
// // // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // // //         </div>

// // // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // // //             Solve
// // // // // // // // // // //           </button>
// // // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // // //             Reset
// // // // // // // // // // //           </button>
// // // // // // // // // // //         </div>

// // // // // // // // // // //         {error && (
// // // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // // //             {error}
// // // // // // // // // // //           </div>
// // // // // // // // // // //         )}

// // // // // // // // // // //         {renderResult()}

// // // // // // // // // // //         {explanation.length > 0 && (
// // // // // // // // // // //           <div className={styles.explanation}>
// // // // // // // // // // //             <h3 className={styles.explanationTitle}>Solution Steps:</h3>
// // // // // // // // // // //             {explanation.map((step, index) => (
// // // // // // // // // // //               <div key={index} className={styles.explanationStep}>
// // // // // // // // // // //                 <p className={styles.explanationText}>{step.text}</p>
// // // // // // // // // // //                 <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(step.math)} />
// // // // // // // // // // //               </div>
// // // // // // // // // // //             ))}
// // // // // // // // // // //           </div>
// // // // // // // // // // //         )}
// // // // // // // // // // //       </div>
// // // // // // // // // // //     </div>
// // // // // // // // // // //   );
// // // // // // // // // // // };

// // // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // import katex from 'katex';
// // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // //   const initialState = {
// // // // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // //   };

// // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);
// // // // // // // // // //   const [explanation, setExplanation] = useState([]);

// // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // //     if (value === '') return '';
// // // // // // // // // //     const num = parseFloat(value);
// // // // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // // // //   };

// // // // // // // // // //   const hasAnyCoefficient = () => {
// // // // // // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // // // // // //   };

// // // // // // // // // //   const formatNumber = (num) => {
// // // // // // // // // //     if (num === 0) return '0';
// // // // // // // // // //     if (num === 1) return '';
// // // // // // // // // //     if (num === -1) return '-';
// // // // // // // // // //     return num.toString();
// // // // // // // // // //   };

// // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // //       return '';
// // // // // // // // // //     }

// // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // //       return '';
// // // // // // // // // //     }

// // // // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // // // //       const absNum = Math.abs(num);
// // // // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // // // //       return `${sign}${numStr}`;
// // // // // // // // // //     };

// // // // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // // // //     let equation = '';
// // // // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // // // //     equation += ' = 0';

// // // // // // // // // //     return equation.trim();
// // // // // // // // // //   };

// // // // // // // // // //   const generateExplanation = (result, a, b, c) => {
// // // // // // // // // //     if (result.type === 'linear') {
// // // // // // // // // //       return [
// // // // // // // // // //         {
// // // // // // // // // //           text: "This is a linear equation in the form:",
// // // // // // // // // //           math: "bx + c = 0"
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Move all terms to left side:",
// // // // // // // // // //           math: `${b}x + ${c} = 0`
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Subtract c from both sides:",
// // // // // // // // // //           math: `${b}x = ${-c}`
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Divide both sides by b:",
// // // // // // // // // //           math: `x = ${result.x}`
// // // // // // // // // //         }
// // // // // // // // // //       ];
// // // // // // // // // //     }

// // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // //     if (result.type === 'real' || result.type === 'equal') {
// // // // // // // // // //       return [
// // // // // // // // // //         {
// // // // // // // // // //           text: "This is a quadratic equation in the form:",
// // // // // // // // // //           math: "ax^2 + bx + c = 0"
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Using the quadratic formula: x = (-b Â± â(bÂ² - 4ac)) / (2a)",
// // // // // // // // // //           math: "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}"
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Substitute the values:",
// // // // // // // // // //           math: `x = \\frac{${-b} \\pm \\sqrt{(${b})^2 - 4(${a})(${c})}}{2(${a})}`
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Calculate the discriminant (bÂ² - 4ac):",
// // // // // // // // // //           math: `\\text{discriminant} = ${discriminant}`
// // // // // // // // // //         },
// // // // // // // // // //         ...(result.type === 'equal' ? [
// // // // // // // // // //           {
// // // // // // // // // //             text: "Since the discriminant is zero, there is exactly one solution:",
// // // // // // // // // //             math: `x = ${result.x}`
// // // // // // // // // //           }
// // // // // // // // // //         ] : [
// // // // // // // // // //           {
// // // // // // // // // //             text: "Since the discriminant is positive, there are two real solutions:",
// // // // // // // // // //             math: `x_1 = ${result.x1}, x_2 = ${result.x2}`
// // // // // // // // // //           }
// // // // // // // // // //         ])
// // // // // // // // // //       ];
// // // // // // // // // //     }

// // // // // // // // // //     if (result.type === 'complex' && showComplexSolution) {
// // // // // // // // // //       return [
// // // // // // // // // //         {
// // // // // // // // // //           text: "This is a quadratic equation in the form:",
// // // // // // // // // //           math: "ax^2 + bx + c = 0"
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Using the quadratic formula: x = (-b Â± â(bÂ² - 4ac)) / (2a)",
// // // // // // // // // //           math: "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}"
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Substitute the values:",
// // // // // // // // // //           math: `x = \\frac{${-b} \\pm \\sqrt{(${b})^2 - 4(${a})(${c})}}{2(${a})}`
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Calculate the discriminant (bÂ² - 4ac):",
// // // // // // // // // //           math: `\\text{discriminant} = ${discriminant}`
// // // // // // // // // //         },
// // // // // // // // // //         {
// // // // // // // // // //           text: "Since the discriminant is negative, the solutions are complex:",
// // // // // // // // // //           math: `x_{1,2} = ${result.real} \\pm ${result.imaginary}i`
// // // // // // // // // //         }
// // // // // // // // // //       ];
// // // // // // // // // //     }

// // // // // // // // // //     return [];
// // // // // // // // // //   };

// // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // //     if (!tex) return { __html: '' };
// // // // // // // // // //     return {
// // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // //         throwOnError: false,
// // // // // // // // // //         displayMode: false
// // // // // // // // // //       })
// // // // // // // // // //     };
// // // // // // // // // //   };

// // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // //     const newCoefficients = {
// // // // // // // // // //       ...coefficients,
// // // // // // // // // //       [name]: normalizeNumber(value)
// // // // // // // // // //     };
// // // // // // // // // //     setCoefficients(newCoefficients);
// // // // // // // // // //     setError('');
// // // // // // // // // //     setExplanation([]);
// // // // // // // // // //     setShowComplexSolution(false);
    
// // // // // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // //     }
// // // // // // // // // //   };

// // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // //       ...prev,
// // // // // // // // // //       [name]: value
// // // // // // // // // //     }));
// // // // // // // // // //   };

// // // // // // // // // //   const handleReset = () => {
// // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // //     setResult(null);
// // // // // // // // // //     setError('');
// // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // //     setExplanation([]);
// // // // // // // // // //   };

// // // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // // //     // Update explanation when showing complex solutions
// // // // // // // // // //     if (result && result.type === 'complex') {
// // // // // // // // // //       const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // //       const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // //       const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);
// // // // // // // // // //       setExplanation(generateExplanation(result, a, b, c));
// // // // // // // // // //     }
// // // // // // // // // //   };

// // // // // // // // // //   const validateInputs = () => {
// // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // //       setError('Please enter at least one coefficient');
// // // // // // // // // //       return false;
// // // // // // // // // //     }

// // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // //       return false;
// // // // // // // // // //     }

// // // // // // // // // //     return true;
// // // // // // // // // //   };

// // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // //     setError('');
// // // // // // // // // //     setResult(null);
// // // // // // // // // //     setExplanation([]);

// // // // // // // // // //     if (!validateInputs()) {
// // // // // // // // // //       return;
// // // // // // // // // //     }

// // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // //       return;
// // // // // // // // // //     }

// // // // // // // // // //     let newResult;

// // // // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // // // //       const x = -c / b;
// // // // // // // // // //       newResult = {
// // // // // // // // // //         type: 'linear',
// // // // // // // // // //         x: x.toFixed(4)
// // // // // // // // // //       };
// // // // // // // // // //     } else {
// // // // // // // // // //       const discriminant = b * b - 4 * a * c;

// // // // // // // // // //       if (discriminant > 0) {
// // // // // // // // // //         const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // //         const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // //         newResult = {
// // // // // // // // // //           type: 'real',
// // // // // // // // // //           x1: x1.toFixed(4),
// // // // // // // // // //           x2: x2.toFixed(4)
// // // // // // // // // //         };
// // // // // // // // // //       } else if (discriminant === 0) {
// // // // // // // // // //         const x = -b / (2 * a);
// // // // // // // // // //         newResult = {
// // // // // // // // // //           type: 'equal',
// // // // // // // // // //           x: x.toFixed(4)
// // // // // // // // // //         };
// // // // // // // // // //       } else {
// // // // // // // // // //         const realPart = (-b / (2 * a));
// // // // // // // // // //         const imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
// // // // // // // // // //         newResult = {
// // // // // // // // // //           type: 'complex',
// // // // // // // // // //           real: realPart.toFixed(4),
// // // // // // // // // //           imaginary: imaginaryPart.toFixed(4)
// // // // // // // // // //         };
// // // // // // // // // //       }
// // // // // // // // // //     }

// // // // // // // // // //     setResult(newResult);
// // // // // // // // // //     // Only generate explanation for non-complex solutions initially
// // // // // // // // // //     if (newResult.type !== 'complex') {
// // // // // // // // // //       setExplanation(generateExplanation(newResult, a, b, c));
// // // // // // // // // //     }
// // // // // // // // // //   };

// // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // //       <button
// // // // // // // // // //         type="button"
// // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // //           target: { 
// // // // // // // // // //             name, 
// // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // //           } 
// // // // // // // // // //         })}
// // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // //       >
// // // // // // // // // //         {value}
// // // // // // // // // //       </button>
// // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // //     </div>
// // // // // // // // // //   );

// // // // // // // // // //   const renderResult = () => {
// // // // // // // // // //     if (!result) return null;

// // // // // // // // // //     return (
// // // // // // // // // //       <div className={styles.result}>
// // // // // // // // // //         {result.type === 'linear' && (
// // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // //         )}

// // // // // // // // // //         {result.type === 'real' && (
// // // // // // // // // //           <>
// // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // //           </>
// // // // // // // // // //         )}

// // // // // // // // // //         {result.type === 'equal' && (
// // // // // // // // // //           <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // //         )}

// // // // // // // // // //         {result.type === 'complex' && (
// // // // // // // // // //           <>
// // // // // // // // // //             <p className={styles.noSolutionMessage}>
// // // // // // // // // //               There are no real number solutions for this equation
// // // // // // // // // //             </p>
// // // // // // // // // //             {!showComplexSolution ? (
// // // // // // // // // //               <button 
// // // // // // // // // //                 onClick={handleShowComplexSolution}
// // // // // // // // // //                 className={styles.showComplexButton}
// // // // // // // // // //               >
// // // // // // // // // //                 Show complex solutions
// // // // // // // // // //               </button>
// // // // // // // // // //             ) : (
// // // // // // // // // //               <>
// // // // // // // // // //                 <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // //                 <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // //               </>
// // // // // // // // // //             )}
// // // // // // // // // //           </>
// // // // // // // // // //         )}

// // // // // // // // // //         {explanation.length > 0 && (
// // // // // // // // // //           <div className={styles.explanation}>
// // // // // // // // // //             <h3 className={styles.explanationTitle}>Solution Steps:</h3>
// // // // // // // // // //             {explanation.map((step, index) => (
// // // // // // // // // //               <div key={index} className={styles.explanationStep}>
// // // // // // // // // //                 <p className={styles.explanationText}>{step.text}</p>
// // // // // // // // // //                 <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(step.math)} />
// // // // // // // // // //               </div>
// // // // // // // // // //             ))}
// // // // // // // // // //           </div>
// // // // // // // // // //         )}
// // // // // // // // // //       </div>
// // // // // // // // // //     );
// // // // // // // // // //   };

// // // // // // // // // //   return (
// // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // //         <div 
// // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // //         />
        
// // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // //             <SignToggle
// // // // // // // // // //               name="a"
// // // // // // // // // //               value={signs.a}
// // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // //             />
// // // // // // // // // //             <input
// // // // // // // // // //               type="number"
// // // // // // // // // //               name="a"
// // // // // // // // // //               value={coefficients.a}
// // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // //               placeholder="0"
// // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // //             />
// // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // //           </div>
          
// // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // //             <SignToggle
// // // // // // // // // //               name="b"
// // // // // // // // // //               value={signs.b}
// // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // //             />
// // // // // // // // // //             <input
// // // // // // // // // //               type="number"
// // // // // // // // // //               name="b"
// // // // // // // // // //               value={coefficients.b}
// // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // //               placeholder="0"
// // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // //             />
// // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // //           </div>
          
// // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // //             <SignToggle
// // // // // // // // // //               name="c"
// // // // // // // // // //               value={signs.c}
// // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // //             />
// // // // // // // // // //             <input
// // // // // // // // // //               type="number"
// // // // // // // // // //               name="c"
// // // // // // // // // //               value={coefficients.c}
// // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // //               placeholder="0"
// // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // //             />
// // // // // // // // // //           </div>
// // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // //         </div>

// // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // //             Solve
// // // // // // // // // //           </button>
// // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // //             Reset
// // // // // // // // // //           </button>
// // // // // // // // // //         </div>

// // // // // // // // // //         {error && (
// // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // //             {error}
// // // // // // // // // //           </div>
// // // // // // // // // //         )}

// // // // // // // // // //         {renderResult()}
// // // // // // // // // //       </div>
// // // // // // // // // //     </div>
// // // // // // // // // //   );
// // // // // // // // // // };

// // // // // // // // // // export default QuadraticSolver;
// // // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // // import katex from 'katex';
// // // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // // const QuadraticSolver = () => {
// // // // // // // // // //   const initialState = {
// // // // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // // //   };

// // // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // // //     if (value === '') return '';
// // // // // // // // // //     const num = parseFloat(value);
// // // // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // // // //   };

// // // // // // // // // //   const hasAnyCoefficient = () => {
// // // // // // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // // // // // //   };

// // // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // //       return '';
// // // // // // // // // //     }

// // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // //       return '';
// // // // // // // // // //     }

// // // // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // // // //       const absNum = Math.abs(num);
// // // // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // // // //       return `${sign}${numStr}`;
// // // // // // // // // //     };

// // // // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // // // //     let equation = '';
// // // // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // // // //     equation += ' = 0';

// // // // // // // // // //     return equation.trim();
// // // // // // // // // //   };

// // // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // // //     if (!tex) return { __html: '' };
// // // // // // // // // //     return {
// // // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // // //         throwOnError: false,
// // // // // // // // // //         displayMode: false
// // // // // // // // // //       })
// // // // // // // // // //     };
// // // // // // // // // //   };

// // // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // //     const newCoefficients = {
// // // // // // // // // //       ...coefficients,
// // // // // // // // // //       [name]: normalizeNumber(value)
// // // // // // // // // //     };
// // // // // // // // // //     setCoefficients(newCoefficients);
// // // // // // // // // //     setError('');
    
// // // // // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // //     }
// // // // // // // // // //   };

// // // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // // //     const { name, value } = e.target;
// // // // // // // // // //     setSigns(prev => ({
// // // // // // // // // //       ...prev,
// // // // // // // // // //       [name]: value
// // // // // // // // // //     }));
// // // // // // // // // //   };

// // // // // // // // // //   const handleReset = () => {
// // // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // // //     setResult(null);
// // // // // // // // // //     setError('');
// // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // //   };

// // // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // // //   };

// // // // // // // // // //   const validateInputs = () => {
// // // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // // //       setError('Please enter at least one coefficient');
// // // // // // // // // //       return false;
// // // // // // // // // //     }

// // // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // //       return false;
// // // // // // // // // //     }

// // // // // // // // // //     return true;
// // // // // // // // // //   };

// // // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // // //     setError('');
// // // // // // // // // //     setResult(null);

// // // // // // // // // //     if (!validateInputs()) {
// // // // // // // // // //       return;
// // // // // // // // // //     }

// // // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // // //       return;
// // // // // // // // // //     }

// // // // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // // // //       const x = -c / b;
// // // // // // // // // //       setResult({
// // // // // // // // // //         type: 'linear',
// // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // //         steps: [
// // // // // // // // // //           { text: "For linear equation bx + c = 0:", math: `${b}x + ${c} = 0` },
// // // // // // // // // //           { text: "Subtract c from both sides:", math: `${b}x = ${-c}` },
// // // // // // // // // //           { text: "Divide both sides by b:", math: `x = ${x.toFixed(4)}` }
// // // // // // // // // //         ]
// // // // // // // // // //       });
// // // // // // // // // //       return;
// // // // // // // // // //     }

// // // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // // //     if (discriminant > 0) {
// // // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // // //       setResult({
// // // // // // // // // //         type: 'real',
// // // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // // //         x2: x2.toFixed(4),
// // // // // // // // // //         steps: [
// // // // // // // // // //           { text: "Using quadratic formula:", math: "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}" },
// // // // // // // // // //           { text: "Calculate discriminant:", math: `b^2 - 4ac = ${discriminant}` },
// // // // // // // // // //           { text: "Since discriminant > 0, there are two real solutions:", math: `x = \\frac{${-b} \\pm \\sqrt{${discriminant}}}{${2*a}}` },
// // // // // // // // // //           { text: "Calculate solutions:", math: `x_{1,2} = ${x1.toFixed(4)}, ${x2.toFixed(4)}` }
// // // // // // // // // //         ]
// // // // // // // // // //       });
// // // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // // //       setResult({
// // // // // // // // // //         type: 'equal',
// // // // // // // // // //         x: x.toFixed(4),
// // // // // // // // // //         steps: [
// // // // // // // // // //           { text: "Using quadratic formula:", math: "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}" },
// // // // // // // // // //           { text: "Calculate discriminant:", math: `b^2 - 4ac = ${discriminant}` },
// // // // // // // // // //           { text: "Since discriminant = 0, there is one solution:", math: `x = \\frac{${-b}}{${2*a}}` },
// // // // // // // // // //           { text: "Calculate solution:", math: `x = ${x.toFixed(4)}` }
// // // // // // // // // //         ]
// // // // // // // // // //       });
// // // // // // // // // //     } else {
// // // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // // //       setResult({
// // // // // // // // // //         type: 'complex',
// // // // // // // // // //         real: realPart,
// // // // // // // // // //         imaginary: imaginaryPart,
// // // // // // // // // //         steps: [
// // // // // // // // // //           { text: "Using quadratic formula:", math: "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}" },
// // // // // // // // // //           { text: "Calculate discriminant:", math: `b^2 - 4ac = ${discriminant}` },
// // // // // // // // // //           { text: "Since discriminant < 0, we have complex solutions:", math: "\\text{For negative discriminant, }\\sqrt{-d} = i\\sqrt{d}" },
// // // // // // // // // //           { text: "Real part:", math: `\\frac{-b}{2a} = ${realPart}` },
// // // // // // // // // //           { text: "Imaginary part:", math: `\\frac{\\sqrt{${-discriminant}}}{2a} = ${imaginaryPart}` },
// // // // // // // // // //           { text: "Complex solutions:", math: `x = ${realPart} \\pm ${imaginaryPart}i` }
// // // // // // // // // //         ]
// // // // // // // // // //       });
// // // // // // // // // //     }
// // // // // // // // // //   };

// // // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // // //       <button
// // // // // // // // // //         type="button"
// // // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // // //           target: { 
// // // // // // // // // //             name, 
// // // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // // //           } 
// // // // // // // // // //         })}
// // // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // // //       >
// // // // // // // // // //         {value}
// // // // // // // // // //       </button>
// // // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // // //     </div>
// // // // // // // // // //   );

// // // // // // // // // //   const renderResult = () => {
// // // // // // // // // //     if (!result) return null;

// // // // // // // // // //     return (
// // // // // // // // // //       <div className={styles.resultContainer}>
// // // // // // // // // //         <div className={styles.solutions}>
// // // // // // // // // //           {result.type === 'linear' && (
// // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // //           )}

// // // // // // // // // //           {result.type === 'real' && (
// // // // // // // // // //             <>
// // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // // //             </>
// // // // // // // // // //           )}

// // // // // // // // // //           {result.type === 'equal' && (
// // // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // // //           )}

// // // // // // // // // //           {result.type === 'complex' && (
// // // // // // // // // //             <>
// // // // // // // // // //               <p className={styles.noSolutionMessage}>
// // // // // // // // // //                 There are no real number solutions for this equation
// // // // // // // // // //               </p>
// // // // // // // // // //               {!showComplexSolution ? (
// // // // // // // // // //                 <button 
// // // // // // // // // //                   onClick={handleShowComplexSolution}
// // // // // // // // // //                   className={styles.showComplexButton}
// // // // // // // // // //                 >
// // // // // // // // // //                   Show complex solutions
// // // // // // // // // //                 </button>
// // // // // // // // // //               ) : (
// // // // // // // // // //                 <>
// // // // // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // // //                 </>
// // // // // // // // // //               )}
// // // // // // // // // //             </>
// // // // // // // // // //           )}
// // // // // // // // // //         </div>

// // // // // // // // // //         {(result.type !== 'complex' || (result.type === 'complex' && showComplexSolution)) && (
// // // // // // // // // //           <div className={styles.steps}>
// // // // // // // // // //             <h3 className={styles.stepsTitle}>Solution Steps:</h3>
// // // // // // // // // //             {result.steps.map((step, index) => (
// // // // // // // // // //               <div key={index} className={styles.step}>
// // // // // // // // // //                 <p className={styles.stepText}>{step.text}</p>
// // // // // // // // // //                 <div className={styles.stepMath} dangerouslySetInnerHTML={renderKaTeX(step.math)} />
// // // // // // // // // //               </div>
// // // // // // // // // //             ))}
// // // // // // // // // //           </div>
// // // // // // // // // //         )}
// // // // // // // // // //       </div>
// // // // // // // // // //     );
// // // // // // // // // //   };

// // // // // // // // // //   return (
// // // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // // //         <div 
// // // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // // //         />
        
// // // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // //             <SignToggle
// // // // // // // // // //               name="a"
// // // // // // // // // //               value={signs.a}
// // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // //             />
// // // // // // // // // //             <input
// // // // // // // // // //               type="number"
// // // // // // // // // //               name="a"
// // // // // // // // // //               value={coefficients.a}
// // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // //               placeholder="0"
// // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // //             />
// // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // // //           </div>
          
// // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // //             <SignToggle
// // // // // // // // // //               name="b"
// // // // // // // // // //               value={signs.b}
// // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // //             />
// // // // // // // // // //             <input
// // // // // // // // // //               type="number"
// // // // // // // // // //               name="b"
// // // // // // // // // //               value={coefficients.b}
// // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // //               placeholder="0"
// // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // //             />
// // // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // // //           </div>
          
// // // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // // //             <SignToggle
// // // // // // // // // //               name="c"
// // // // // // // // // //               value={signs.c}
// // // // // // // // // //               onChange={handleSignChange}
// // // // // // // // // //             />
// // // // // // // // // //             <input
// // // // // // // // // //               type="number"
// // // // // // // // // //               name="c"
// // // // // // // // // //               value={coefficients.c}
// // // // // // // // // //               onChange={handleInputChange}
// // // // // // // // // //               placeholder="0"
// // // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // // //             />
// // // // // // // // // //           </div>
// // // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // // //         </div>

// // // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // // //             Solve
// // // // // // // // // //           </button>
// // // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // // //             Reset
// // // // // // // // // //           </button>
// // // // // // // // // //         </div>

// // // // // // // // // //         {error && (
// // // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // // //             {error}
// // // // // // // // // //           </div>
// // // // // // // // // //         )}

// // // // // // // // // //         {renderResult()}
// // // // // // // // // //       </div>
// // // // // // // // // //     </div>
// // // // // // // // // //   );
// // // // // // // // // // };

// // // // // // // // // // export default QuadraticSolver;

// // // // // // // // // import React, { useState } from 'react';
// // // // // // // // // import katex from 'katex';
// // // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // // const QuadraticSolver = ({ 
// // // // // // // // //   explanations = null
// // // // // // // // // }) => {
// // // // // // // // //   const initialState = {
// // // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // // //   };

// // // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // // //   const [error, setError] = useState('');
// // // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // // //     if (value === '') return '';
// // // // // // // // //     const num = parseFloat(value);
// // // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // // //   };

// // // // // // // // //   const hasAnyCoefficient = () => {
// // // // // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // // // // //   };

// // // // // // // // //   const getCurrentEquation = () => {
// // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // //       return '';
// // // // // // // // //     }

// // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // //       return '';
// // // // // // // // //     }

// // // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // // //       const absNum = Math.abs(num);
// // // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // // //       return `${sign}${numStr}`;
// // // // // // // // //     };

// // // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // // //     let equation = '';
// // // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // // //     equation += ' = 0';

// // // // // // // // //     return equation.trim();
// // // // // // // // //   };

// // // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // // //     if (!tex) return { __html: '' };
// // // // // // // // //     return {
// // // // // // // // //       __html: katex.renderToString(tex, {
// // // // // // // // //         throwOnError: false,
// // // // // // // // //         displayMode: false
// // // // // // // // //       })
// // // // // // // // //     };
// // // // // // // // //   };

// // // // // // // // //   const handleInputChange = (e) => {
// // // // // // // // //     const { name, value } = e.target;
// // // // // // // // //     const newCoefficients = {
// // // // // // // // //       ...coefficients,
// // // // // // // // //       [name]: normalizeNumber(value)
// // // // // // // // //     };
// // // // // // // // //     setCoefficients(newCoefficients);
// // // // // // // // //     setError('');
    
// // // // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // //     }
// // // // // // // // //   };

// // // // // // // // //   const handleSignChange = (e) => {
// // // // // // // // //     const { name, value } = e.target;
// // // // // // // // //     setSigns(prev => ({
// // // // // // // // //       ...prev,
// // // // // // // // //       [name]: value
// // // // // // // // //     }));
// // // // // // // // //   };

// // // // // // // // //   const handleReset = () => {
// // // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // // //     setSigns(initialState.signs);
// // // // // // // // //     setResult(null);
// // // // // // // // //     setError('');
// // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // //   };

// // // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // // //     setShowComplexSolution(true);
// // // // // // // // //   };

// // // // // // // // //   const validateInputs = () => {
// // // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // // //       setError('Please enter at least one coefficient');
// // // // // // // // //       return false;
// // // // // // // // //     }

// // // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // //       return false;
// // // // // // // // //     }

// // // // // // // // //     return true;
// // // // // // // // //   };

// // // // // // // // //   const solveQuadratic = () => {
// // // // // // // // //     setShowComplexSolution(false);
// // // // // // // // //     setError('');
// // // // // // // // //     setResult(null);

// // // // // // // // //     if (!validateInputs()) {
// // // // // // // // //       return;
// // // // // // // // //     }

// // // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // // //       return;
// // // // // // // // //     }

// // // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // // //       const x = -c / b;
// // // // // // // // //       setResult({
// // // // // // // // //         type: 'linear',
// // // // // // // // //         x: x.toFixed(4)
// // // // // // // // //       });
// // // // // // // // //       return;
// // // // // // // // //     }

// // // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // // //     if (discriminant > 0) {
// // // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // // //       setResult({
// // // // // // // // //         type: 'real',
// // // // // // // // //         x1: x1.toFixed(4),
// // // // // // // // //         x2: x2.toFixed(4)
// // // // // // // // //       });
// // // // // // // // //     } else if (discriminant === 0) {
// // // // // // // // //       const x = -b / (2 * a);
// // // // // // // // //       setResult({
// // // // // // // // //         type: 'equal',
// // // // // // // // //         x: x.toFixed(4)
// // // // // // // // //       });
// // // // // // // // //     } else {
// // // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // // //       setResult({
// // // // // // // // //         type: 'complex',
// // // // // // // // //         real: realPart,
// // // // // // // // //         imaginary: imaginaryPart
// // // // // // // // //       });
// // // // // // // // //     }
// // // // // // // // //   };

// // // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // // //       <button
// // // // // // // // //         type="button"
// // // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // // //         onClick={() => onChange({ 
// // // // // // // // //           target: { 
// // // // // // // // //             name, 
// // // // // // // // //             value: value === '+' ? '-' : '+' 
// // // // // // // // //           } 
// // // // // // // // //         })}
// // // // // // // // //         aria-label="Toggle sign"
// // // // // // // // //       >
// // // // // // // // //         {value}
// // // // // // // // //       </button>
// // // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // // //     </div>
// // // // // // // // //   );

// // // // // // // // //   const renderResult = () => {
// // // // // // // // //     if (!result) return null;

// // // // // // // // //     return (
// // // // // // // // //       <div className={styles.resultContainer}>
// // // // // // // // //         <div className={styles.solutions}>
// // // // // // // // //           {result.type === 'linear' && (
// // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // //           )}

// // // // // // // // //           {result.type === 'real' && (
// // // // // // // // //             <>
// // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // // //             </>
// // // // // // // // //           )}

// // // // // // // // //           {result.type === 'equal' && (
// // // // // // // // //             <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // // //           )}

// // // // // // // // //           {result.type === 'complex' && (
// // // // // // // // //             <>
// // // // // // // // //               <p className={styles.noSolutionMessage}>
// // // // // // // // //                 There are no real number solutions for this equation
// // // // // // // // //               </p>
// // // // // // // // //               {!showComplexSolution ? (
// // // // // // // // //                 <button 
// // // // // // // // //                   onClick={handleShowComplexSolution}
// // // // // // // // //                   className={styles.showComplexButton}
// // // // // // // // //                 >
// // // // // // // // //                   Show complex solutions
// // // // // // // // //                 </button>
// // // // // // // // //               ) : (
// // // // // // // // //                 <>
// // // // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // // //                 </>
// // // // // // // // //               )}
// // // // // // // // //             </>
// // // // // // // // //           )}
// // // // // // // // //         </div>

// // // // // // // // //         {explanations && result.type && explanations[result.type] && (
// // // // // // // // //           <div className={styles.explanations}>
// // // // // // // // //             {explanations[result.type].map((explanation, index) => (
// // // // // // // // //               <div key={index} className={styles.explanation}>
// // // // // // // // //                 {explanation.text && (
// // // // // // // // //                   <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // // // //                 )}
// // // // // // // // //                 {explanation.math && (
// // // // // // // // //                   <div 
// // // // // // // // //                     className={styles.explanationMath} 
// // // // // // // // //                     dangerouslySetInnerHTML={renderKaTeX(explanation.math)} 
// // // // // // // // //                   />
// // // // // // // // //                 )}
// // // // // // // // //               </div>
// // // // // // // // //             ))}
// // // // // // // // //           </div>
// // // // // // // // //         )}
// // // // // // // // //       </div>
// // // // // // // // //     );
// // // // // // // // //   };

// // // // // // // // //   return (
// // // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // // //       <div className={styles.solverCard}>
// // // // // // // // //         <div 
// // // // // // // // //           className={styles.currentEquation} 
// // // // // // // // //           dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} 
// // // // // // // // //         />
        
// // // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // //             <SignToggle
// // // // // // // // //               name="a"
// // // // // // // // //               value={signs.a}
// // // // // // // // //               onChange={handleSignChange}
// // // // // // // // //             />
// // // // // // // // //             <input
// // // // // // // // //               type="number"
// // // // // // // // //               name="a"
// // // // // // // // //               value={coefficients.a}
// // // // // // // // //               onChange={handleInputChange}
// // // // // // // // //               placeholder="0"
// // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // //             />
// // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // // //           </div>
          
// // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // //             <SignToggle
// // // // // // // // //               name="b"
// // // // // // // // //               value={signs.b}
// // // // // // // // //               onChange={handleSignChange}
// // // // // // // // //             />
// // // // // // // // //             <input
// // // // // // // // //               type="number"
// // // // // // // // //               name="b"
// // // // // // // // //               value={coefficients.b}
// // // // // // // // //               onChange={handleInputChange}
// // // // // // // // //               placeholder="0"
// // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // //             />
// // // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // // //           </div>
          
// // // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // // //             <SignToggle
// // // // // // // // //               name="c"
// // // // // // // // //               value={signs.c}
// // // // // // // // //               onChange={handleSignChange}
// // // // // // // // //             />
// // // // // // // // //             <input
// // // // // // // // //               type="number"
// // // // // // // // //               name="c"
// // // // // // // // //               value={coefficients.c}
// // // // // // // // //               onChange={handleInputChange}
// // // // // // // // //               placeholder="0"
// // // // // // // // //               className={styles.coefficientInput}
// // // // // // // // //             />
// // // // // // // // //           </div>
// // // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // // //         </div>

// // // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>
// // // // // // // // //             Solve
// // // // // // // // //           </button>
// // // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>
// // // // // // // // //             Reset
// // // // // // // // //           </button>
// // // // // // // // //         </div>

// // // // // // // // //         {error && (
// // // // // // // // //           <div className={styles.errorMessage}>
// // // // // // // // //             {error}
// // // // // // // // //           </div>
// // // // // // // // //         )}

// // // // // // // // //         {renderResult()}
// // // // // // // // //       </div>
// // // // // // // // //     </div>
// // // // // // // // //   );
// // // // // // // // // };

// // // // // // // // // export default QuadraticSolver;

// // // // // // // // // QuadraticSolver.js
// // // // // // // // import React, { useState } from 'react';
// // // // // // // // import katex from 'katex';
// // // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // // const QuadraticSolver = ({ explanations = null }) => {
// // // // // // // //   const initialState = {
// // // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // // //   };

// // // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // // //   const [result, setResult] = useState(null);
// // // // // // // //   const [error, setError] = useState('');
// // // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // // //   const normalizeNumber = (value) => {
// // // // // // // //     if (value === '') return '';
// // // // // // // //     const num = parseFloat(value);
// // // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // // //   };

// // // // // // // //   const hasAnyCoefficient = () => {
// // // // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // // // //   };

// // // // // // // //   const getCurrentEquation = () => {
// // // // // // // //     if (!hasAnyCoefficient()) return '';

// // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

// // // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // // //       const absNum = Math.abs(num);
// // // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // // //       return `${sign}${numStr}`;
// // // // // // // //     };

// // // // // // // //     const aStr = formatCoef(a, true);
// // // // // // // //     const bStr = formatCoef(b, false);
// // // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // // //     let equation = '';
// // // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // // //     equation += ' = 0';

// // // // // // // //     return equation.trim();
// // // // // // // //   };

// // // // // // // //   const renderKaTeX = (tex) => {
// // // // // // // //     if (!tex) return { __html: '' };
// // // // // // // //     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
// // // // // // // //   };

// // // // // // // //   const handleInputChange = (e) => {
// // // // // // // //     const { name, value } = e.target;
// // // // // // // //     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
// // // // // // // //     setCoefficients(newCoefficients);
// // // // // // // //     setError('');
    
// // // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // //     }
// // // // // // // //   };

// // // // // // // //   const handleSignChange = (e) => {
// // // // // // // //     const { name, value } = e.target;
// // // // // // // //     setSigns(prev => ({ ...prev, [name]: value }));
// // // // // // // //   };

// // // // // // // //   const handleReset = () => {
// // // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // // //     setSigns(initialState.signs);
// // // // // // // //     setResult(null);
// // // // // // // //     setError('');
// // // // // // // //     setShowComplexSolution(false);
// // // // // // // //   };

// // // // // // // //   const handleShowComplexSolution = () => {
// // // // // // // //     setShowComplexSolution(true);
// // // // // // // //   };

// // // // // // // //   const validateInputs = () => {
// // // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // // //       setError('Please enter at least one coefficient');
// // // // // // // //       return false;
// // // // // // // //     }

// // // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // //       return false;
// // // // // // // //     }

// // // // // // // //     return true;
// // // // // // // //   };

// // // // // // // //   const solveQuadratic = () => {
// // // // // // // //     setShowComplexSolution(false);
// // // // // // // //     setError('');
// // // // // // // //     setResult(null);

// // // // // // // //     if (!validateInputs()) return;

// // // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // // //       return;
// // // // // // // //     }

// // // // // // // //     if (a === 0 && b !== 0) {
// // // // // // // //       const x = -c / b;
// // // // // // // //       setResult({ type: 'linear', x: x.toFixed(4) });
// // // // // // // //       return;
// // // // // // // //     }

// // // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // // //     if (discriminant > 0) {
// // // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // // //       setResult({ type: 'real', x1: x1.toFixed(4), x2: x2.toFixed(4) });
// // // // // // // //     } else if (discriminant === 0) {
// // // // // // // //       const x = -b / (2 * a);
// // // // // // // //       setResult({ type: 'equal', x: x.toFixed(4) });
// // // // // // // //     } else {
// // // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // // //       setResult({ type: 'complex', real: realPart, imaginary: imaginaryPart });
// // // // // // // //     }
// // // // // // // //   };

// // // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // // //       <button
// // // // // // // //         type="button"
// // // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // // //         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
// // // // // // // //         aria-label="Toggle sign"
// // // // // // // //       >
// // // // // // // //         {value}
// // // // // // // //       </button>
// // // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // // //     </div>
// // // // // // // //   );

// // // // // // // //   const renderResult = () => {
// // // // // // // //     if (!result) return null;

// // // // // // // //     return (
// // // // // // // //       <div className={styles.resultContainer}>
// // // // // // // //         <div className={styles.solutions}>
// // // // // // // //           {result.type === 'linear' && (
// // // // // // // //             <>
// // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // // // //                 <div className={styles.explanations}>
// // // // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // // // //                     <div key={index} className={styles.explanation}>
// // // // // // // //                       {explanation.text && (
// // // // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // // //                       )}
// // // // // // // //                       {explanation.math && (
// // // // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // // //                       )}
// // // // // // // //                     </div>
// // // // // // // //                   ))}
// // // // // // // //                 </div>
// // // // // // // //               )}
// // // // // // // //             </>
// // // // // // // //           )}

// // // // // // // //           {result.type === 'real' && (
// // // // // // // //             <>
// // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // // // //                 <div className={styles.explanations}>
// // // // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // // // //                     <div key={index} className={styles.explanation}>
// // // // // // // //                       {explanation.text && (
// // // // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // // //                       )}
// // // // // // // //                       {explanation.math && (
// // // // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // // //                       )}
// // // // // // // //                     </div>
// // // // // // // //                   ))}
// // // // // // // //                 </div>
// // // // // // // //               )}
// // // // // // // //             </>
// // // // // // // //           )}

// // // // // // // //           {result.type === 'equal' && (
// // // // // // // //             <>
// // // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // // // //                 <div className={styles.explanations}>
// // // // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // // // //                     <div key={index} className={styles.explanation}>
// // // // // // // //                       {explanation.text && (
// // // // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // // //                       )}
// // // // // // // //                       {explanation.math && (
// // // // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // // //                       )}
// // // // // // // //                     </div>
// // // // // // // //                   ))}
// // // // // // // //                 </div>
// // // // // // // //               )}
// // // // // // // //             </>
// // // // // // // //           )}

// // // // // // // //           {result.type === 'complex' && (
// // // // // // // //             <>
// // // // // // // //               <p className={styles.noSolutionMessage}>
// // // // // // // //                 There are no real number solutions for this equation
// // // // // // // //               </p>
// // // // // // // //               {!showComplexSolution ? (
// // // // // // // //                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
// // // // // // // //                   Show complex solutions
// // // // // // // //                 </button>
// // // // // // // //               ) : (
// // // // // // // //                 <>
// // // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // // //                   {explanations && result.type && explanations[result.type] && (
// // // // // // // //                     <div className={styles.explanations}>
// // // // // // // //                       {explanations[result.type].map((explanation, index) => (
// // // // // // // //                         <div key={index} className={styles.explanation}>
// // // // // // // //                           {explanation.text && (
// // // // // // // //                             <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // // //                           )}
// // // // // // // //                           {explanation.math && (
// // // // // // // //                             <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // // //                           )}
// // // // // // // //                         </div>
// // // // // // // //                       ))}
// // // // // // // //                     </div>
// // // // // // // //                   )}
// // // // // // // //                 </>
// // // // // // // //               )}
// // // // // // // //             </>
// // // // // // // //           )}
// // // // // // // //         </div>
// // // // // // // //       </div>
// // // // // // // //     );
// // // // // // // //   };

// // // // // // // //   return (
// // // // // // // //     <div className={styles.solverContainer}>
// // // // // // // //       <div className={styles.solverCard}>
// // // // // // // //         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
// // // // // // // //         <div className={styles.inputContainer}>
// // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // //             <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
// // // // // // // //             <input
// // // // // // // //               type="number"
// // // // // // // //               name="a"
// // // // // // // //               value={coefficients.a}
// // // // // // // //               onChange={handleInputChange}
// // // // // // // //               placeholder="0"
// // // // // // // //               className={styles.coefficientInput}
// // // // // // // //             />
// // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // // // //           </div>
          
// // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // //             <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
// // // // // // // //             <input
// // // // // // // //               type="number"
// // // // // // // //               name="b"
// // // // // // // //               value={coefficients.b}
// // // // // // // //               onChange={handleInputChange}
// // // // // // // //               placeholder="0"
// // // // // // // //               className={styles.coefficientInput}
// // // // // // // //             />
// // // // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // // // //           </div>
          
// // // // // // // //           <div className={styles.inputGroup}>
// // // // // // // //             <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
// // // // // // // //             <input
// // // // // // // //               type="number"
// // // // // // // //               name="c"
// // // // // // // //               value={coefficients.c}
// // // // // // // //               onChange={handleInputChange}
// // // // // // // //               placeholder="0"
// // // // // // // //               className={styles.coefficientInput}
// // // // // // // //             />
// // // // // // // //           </div>
// // // // // // // //           <span className={styles.operator}>=</span>
// // // // // // // //           <span className={styles.term}>0</span>
// // // // // // // //         </div>

// // // // // // // //         <div className={styles.buttonContainer}>
// // // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
// // // // // // // //           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
// // // // // // // //         </div>

// // // // // // // //         {error && <div className={styles.errorMessage}>{error}</div>}
// // // // // // // //         {renderResult()}
// // // // // // // //       </div>
// // // // // // // //     </div>
// // // // // // // //   );
// // // // // // // // };

// // // // // // // // export default QuadraticSolver;

// // // // // // // import React, { useState } from 'react';
// // // // // // // import katex from 'katex';
// // // // // // // import { X } from 'lucide-react';
// // // // // // // import 'katex/dist/katex.min.css';
// // // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // // const QuadraticSolver = ({ explanations = null }) => {
// // // // // // //   const initialState = {
// // // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // // //   };

// // // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // // //   const [result, setResult] = useState(null);
// // // // // // //   const [error, setError] = useState('');
// // // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // // //   const normalizeNumber = (value) => {
// // // // // // //     if (value === '') return '';
// // // // // // //     const num = parseFloat(value);
// // // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // // //   };

// // // // // // //   const hasAnyCoefficient = () => {
// // // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // // //   };

// // // // // // //   const handleResetCoefficient = (name) => {
// // // // // // //     setCoefficients(prev => ({
// // // // // // //       ...prev,
// // // // // // //       [name]: ''
// // // // // // //     }));
// // // // // // //     setSigns(prev => ({
// // // // // // //       ...prev,
// // // // // // //       [name]: '+'
// // // // // // //     }));
// // // // // // //     setError('');
// // // // // // //   };

// // // // // // //   const getCurrentEquation = () => {
// // // // // // //     if (!hasAnyCoefficient()) return '';

// // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

// // // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // // //       const absNum = Math.abs(num);
// // // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // // //       return `${sign}${numStr}`;
// // // // // // //     };

// // // // // // //     const aStr = formatCoef(a, true);
// // // // // // //     const bStr = formatCoef(b, false);
// // // // // // //     const cStr = formatCoef(c, false, false);

// // // // // // //     let equation = '';
// // // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // // //     equation += ' = 0';

// // // // // // //     return equation.trim();
// // // // // // //   };

// // // // // // //   const renderKaTeX = (tex) => {
// // // // // // //     if (!tex) return { __html: '' };
// // // // // // //     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
// // // // // // //   };

// // // // // // //   const handleInputChange = (e) => {
// // // // // // //     const { name, value } = e.target;
// // // // // // //     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
// // // // // // //     setCoefficients(newCoefficients);
// // // // // // //     setError('');
    
// // // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // //     }
// // // // // // //   };

// // // // // // //   const handleSignChange = (e) => {
// // // // // // //     const { name, value } = e.target;
// // // // // // //     setSigns(prev => ({ ...prev, [name]: value }));
// // // // // // //   };

// // // // // // //   const handleReset = () => {
// // // // // // //     setCoefficients(initialState.coefficients);
// // // // // // //     setSigns(initialState.signs);
// // // // // // //     setResult(null);
// // // // // // //     setError('');
// // // // // // //     setShowComplexSolution(false);
// // // // // // //   };

// // // // // // //   const handleShowComplexSolution = () => {
// // // // // // //     setShowComplexSolution(true);
// // // // // // //   };

// // // // // // //   const validateInputs = () => {
// // // // // // //     if (!hasAnyCoefficient()) {
// // // // // // //       setError('Please enter at least one coefficient');
// // // // // // //       return false;
// // // // // // //     }

// // // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // //       return false;
// // // // // // //     }

// // // // // // //     return true;
// // // // // // //   };

// // // // // // //   const solveQuadratic = () => {
// // // // // // //     setShowComplexSolution(false);
// // // // // // //     setError('');
// // // // // // //     setResult(null);

// // // // // // //     if (!validateInputs()) return;

// // // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // // //       return;
// // // // // // //     }

// // // // // // //     if (a === 0 && b !== 0) {
// // // // // // //       const x = -c / b;
// // // // // // //       setResult({ type: 'linear', x: x.toFixed(4) });
// // // // // // //       return;
// // // // // // //     }

// // // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // // //     if (discriminant > 0) {
// // // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // // //       setResult({ type: 'real', x1: x1.toFixed(4), x2: x2.toFixed(4) });
// // // // // // //     } else if (discriminant === 0) {
// // // // // // //       const x = -b / (2 * a);
// // // // // // //       setResult({ type: 'equal', x: x.toFixed(4) });
// // // // // // //     } else {
// // // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // // //       setResult({ type: 'complex', real: realPart, imaginary: imaginaryPart });
// // // // // // //     }
// // // // // // //   };

// // // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // // //     <div className={styles.signToggleWrapper}>
// // // // // // //       <button
// // // // // // //         type="button"
// // // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // // //         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
// // // // // // //         aria-label="Toggle sign"
// // // // // // //       >
// // // // // // //         {value}
// // // // // // //       </button>
// // // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // // //     </div>
// // // // // // //   );

// // // // // // //   const InputGroup = ({ name, term = null }) => (
// // // // // // //     <div className={styles.inputGroup}>
// // // // // // //       <SignToggle name={name} value={signs[name]} onChange={handleSignChange} />
// // // // // // //       <div className={styles.inputWithReset}>
// // // // // // //         <input
// // // // // // //           type="number"
// // // // // // //           name={name}
// // // // // // //           value={coefficients[name]}
// // // // // // //           onChange={handleInputChange}
// // // // // // //           placeholder="0"
// // // // // // //           className={styles.coefficientInput}
// // // // // // //         />
// // // // // // //         {coefficients[name] !== '' && (
// // // // // // //           <button 
// // // // // // //             onClick={() => handleResetCoefficient(name)}
// // // // // // //             className={styles.resetButton}
// // // // // // //             aria-label={`Reset ${name} coefficient`}
// // // // // // //           >
// // // // // // //             <X size={14} />
// // // // // // //           </button>
// // // // // // //         )}
// // // // // // //       </div>
// // // // // // //       {term && <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX(term)} />}
// // // // // // //     </div>
// // // // // // //   );

// // // // // // //   const renderResult = () => {
// // // // // // //     if (!result) return null;

// // // // // // //     return (
// // // // // // //       <div className={styles.resultContainer}>
// // // // // // //         <div className={styles.solutions}>
// // // // // // //           {result.type === 'linear' && (
// // // // // // //             <>
// // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // // //                 <div className={styles.explanations}>
// // // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // // //                     <div key={index} className={styles.explanation}>
// // // // // // //                       {explanation.text && (
// // // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // //                       )}
// // // // // // //                       {explanation.math && (
// // // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // //                       )}
// // // // // // //                     </div>
// // // // // // //                   ))}
// // // // // // //                 </div>
// // // // // // //               )}
// // // // // // //             </>
// // // // // // //           )}

// // // // // // //           {result.type === 'real' && (
// // // // // // //             <>
// // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // // //                 <div className={styles.explanations}>
// // // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // // //                     <div key={index} className={styles.explanation}>
// // // // // // //                       {explanation.text && (
// // // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // //                       )}
// // // // // // //                       {explanation.math && (
// // // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // //                       )}
// // // // // // //                     </div>
// // // // // // //                   ))}
// // // // // // //                 </div>
// // // // // // //               )}
// // // // // // //             </>
// // // // // // //           )}

// // // // // // //           {result.type === 'equal' && (
// // // // // // //             <>
// // // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // // //                 <div className={styles.explanations}>
// // // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // // //                     <div key={index} className={styles.explanation}>
// // // // // // //                       {explanation.text && (
// // // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // //                       )}
// // // // // // //                       {explanation.math && (
// // // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // //                       )}
// // // // // // //                     </div>
// // // // // // //                   ))}
// // // // // // //                 </div>
// // // // // // //               )}
// // // // // // //             </>
// // // // // // //           )}

// // // // // // //           {result.type === 'complex' && (
// // // // // // //             <>
// // // // // // //               <p className={styles.noSolutionMessage}>
// // // // // // //                 There are no real number solutions for this equation
// // // // // // //               </p>
// // // // // // //               {!showComplexSolution ? (
// // // // // // //                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
// // // // // // //                   Show complex solutions
// // // // // // //                 </button>
// // // // // // //               ) : (
// // // // // // //                 <>
// // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // // //                   {explanations && result.type && explanations[result.type] && (
// // // // // // //                     <div className={styles.explanations}>
// // // // // // //                       {explanations[result.type].map((explanation, index) => (
// // // // // // //                         <div key={index} className={styles.explanation}>
// // // // // // //                           {explanation.text && (
// // // // // // //                             <p className={styles.explanationText}>{explanation.text}</p>
// // // // // // //                           )}
// // // // // // //                           {explanation.math && (
// // // // // // //                             <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // // //                           )}
// // // // // // //                         </div>
// // // // // // //                       ))}
// // // // // // //                     </div>
// // // // // // //                   )}
// // // // // // //                 </>
// // // // // // //               )}
// // // // // // //             </>
// // // // // // //           )}
// // // // // // //         </div>
// // // // // // //       </div>
// // // // // // //     );
// // // // // // //   };

// // // // // // //   return (
// // // // // // //     <div className={styles.solverContainer}>
// // // // // // //       <div className={styles.solverCard}>
// // // // // // //         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
// // // // // // //         <div className={styles.inputContainer}>
// // // // // // //           <InputGroup name="a" term="x^2" />
// // // // // // //           <InputGroup name="b" term="x" />
// // // // // // //           <InputGroup name="c" />
// // // // // // //           <span className={styles.operator}>=</span>
// // // // // // //           <span className={styles.term}>0</span>
// // // // // // //         </div>

// // // // // // //         <div className={styles.buttonContainer}>
// // // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
// // // // // // //           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
// // // // // // //         </div>

// // // // // // //         {error && <div className={styles.errorMessage}>{error}</div>}
// // // // // // //         {renderResult()}
// // // // // // //       </div>
// // // // // // //     </div>
// // // // // // //   );
// // // // // // // };

// // // // // // // export default QuadraticSolver;

// // // // // // import React, { useState } from 'react';
// // // // // // import katex from 'katex';
// // // // // // import { X } from 'lucide-react';
// // // // // // import 'katex/dist/katex.min.css';
// // // // // // import styles from './QuadraticSolver.module.css';

// // // // // // const QuadraticSolver = ({ explanations = null }) => {
// // // // // //   const initialState = {
// // // // // //     coefficients: { a: '', b: '', c: '' },
// // // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // // //   };

// // // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // // //   const [result, setResult] = useState(null);
// // // // // //   const [error, setError] = useState('');
// // // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // // //   const normalizeNumber = (value) => {
// // // // // //     if (value === '') return '';
// // // // // //     const num = parseFloat(value);
// // // // // //     return isNaN(num) ? '' : num.toString();
// // // // // //   };

// // // // // //   const hasAnyCoefficient = () => {
// // // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // // //   };

// // // // // //   const getCurrentEquation = () => {
// // // // // //     if (!hasAnyCoefficient()) return '';

// // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

// // // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // // //       const absNum = Math.abs(num);
// // // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // // //       return `${sign}${numStr}`;
// // // // // //     };

// // // // // //     const aStr = formatCoef(a, true);
// // // // // //     const bStr = formatCoef(b, false);
// // // // // //     const cStr = formatCoef(c, false, false);

// // // // // //     let equation = '';
// // // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // // //     equation += ' = 0';

// // // // // //     return equation.trim();
// // // // // //   };

// // // // // //   const renderKaTeX = (tex) => {
// // // // // //     if (!tex) return { __html: '' };
// // // // // //     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
// // // // // //   };

// // // // // //   const handleInputChange = (e) => {
// // // // // //     const { name, value } = e.target;
// // // // // //     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
// // // // // //     setCoefficients(newCoefficients);
// // // // // //     setError('');
    
// // // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // //     }
// // // // // //   };

// // // // // //   const handleSignChange = (e) => {
// // // // // //     const { name, value } = e.target;
// // // // // //     setSigns(prev => ({ ...prev, [name]: value }));
// // // // // //   };

// // // // // //   const handleReset = () => {
// // // // // //     setCoefficients(initialState.coefficients);
// // // // // //     setSigns(initialState.signs);
// // // // // //     setResult(null);
// // // // // //     setError('');
// // // // // //     setShowComplexSolution(false);
// // // // // //   };

// // // // // //   const handleResetCoefficient = (coefficient) => {
// // // // // //     setCoefficients(prev => ({...prev, [coefficient]: ''}));
// // // // // //     setSigns(prev => ({...prev, [coefficient]: '+'}));
// // // // // //   };

// // // // // //   const handleShowComplexSolution = () => {
// // // // // //     setShowComplexSolution(true);
// // // // // //   };

// // // // // //   const validateInputs = () => {
// // // // // //     if (!hasAnyCoefficient()) {
// // // // // //       setError('Please enter at least one coefficient');
// // // // // //       return false;
// // // // // //     }

// // // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // //       return false;
// // // // // //     }

// // // // // //     return true;
// // // // // //   };

// // // // // //   const solveQuadratic = () => {
// // // // // //     setShowComplexSolution(false);
// // // // // //     setError('');
// // // // // //     setResult(null);

// // // // // //     if (!validateInputs()) return;

// // // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // // //       return;
// // // // // //     }

// // // // // //     if (a === 0 && b !== 0) {
// // // // // //       const x = -c / b;
// // // // // //       setResult({ type: 'linear', x: x.toFixed(4) });
// // // // // //       return;
// // // // // //     }

// // // // // //     const discriminant = b * b - 4 * a * c;

// // // // // //     if (discriminant > 0) {
// // // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // // //       setResult({ type: 'real', x1: x1.toFixed(4), x2: x2.toFixed(4) });
// // // // // //     } else if (discriminant === 0) {
// // // // // //       const x = -b / (2 * a);
// // // // // //       setResult({ type: 'equal', x: x.toFixed(4) });
// // // // // //     } else {
// // // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // // //       setResult({ type: 'complex', real: realPart, imaginary: imaginaryPart });
// // // // // //     }
// // // // // //   };

// // // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // // //     <div className={styles.signToggleWrapper}>
// // // // // //       <button
// // // // // //         type="button"
// // // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // // //         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
// // // // // //         aria-label="Toggle sign"
// // // // // //       >
// // // // // //         {value}
// // // // // //       </button>
// // // // // //       <span className={styles.tooltipText}>Select Sign</span>
// // // // // //     </div>
// // // // // //   );

// // // // // //   const renderResult = () => {
// // // // // //     if (!result) return null;

// // // // // //     return (
// // // // // //       <div className={styles.resultContainer}>
// // // // // //         <div className={styles.solutions}>
// // // // // //           {result.type === 'linear' && (
// // // // // //             <>
// // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // //                 <div className={styles.explanations}>
// // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // //                     <div key={index} className={styles.explanation}>
// // // // // //                       {explanation.text && (
// // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // //                       )}
// // // // // //                       {explanation.math && (
// // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // //                       )}
// // // // // //                     </div>
// // // // // //                   ))}
// // // // // //                 </div>
// // // // // //               )}
// // // // // //             </>
// // // // // //           )}

// // // // // //           {result.type === 'real' && (
// // // // // //             <>
// // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // //                 <div className={styles.explanations}>
// // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // //                     <div key={index} className={styles.explanation}>
// // // // // //                       {explanation.text && (
// // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // //                       )}
// // // // // //                       {explanation.math && (
// // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // //                       )}
// // // // // //                     </div>
// // // // // //                   ))}
// // // // // //                 </div>
// // // // // //               )}
// // // // // //             </>
// // // // // //           )}

// // // // // //           {result.type === 'equal' && (
// // // // // //             <>
// // // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // // //               {explanations && result.type && explanations[result.type] && (
// // // // // //                 <div className={styles.explanations}>
// // // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // // //                     <div key={index} className={styles.explanation}>
// // // // // //                       {explanation.text && (
// // // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // // //                       )}
// // // // // //                       {explanation.math && (
// // // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // //                       )}
// // // // // //                     </div>
// // // // // //                   ))}
// // // // // //                 </div>
// // // // // //               )}
// // // // // //             </>
// // // // // //           )}

// // // // // //           {result.type === 'complex' && (
// // // // // //             <>
// // // // // //               <p className={styles.noSolutionMessage}>
// // // // // //                 There are no real number solutions for this equation
// // // // // //               </p>
// // // // // //               {!showComplexSolution ? (
// // // // // //                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
// // // // // //                   Show complex solutions
// // // // // //                 </button>
// // // // // //               ) : (
// // // // // //                 <>
// // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // // //                   {explanations && result.type && explanations[result.type] && (
// // // // // //                     <div className={styles.explanations}>
// // // // // //                       {explanations[result.type].map((explanation, index) => (
// // // // // //                         <div key={index} className={styles.explanation}>
// // // // // //                           {explanation.text && (
// // // // // //                             <p className={styles.explanationText}>{explanation.text}</p>
// // // // // //                           )}
// // // // // //                           {explanation.math && (
// // // // // //                             <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // // //                           )}
// // // // // //                         </div>
// // // // // //                       ))}
// // // // // //                     </div>
// // // // // //                   )}
// // // // // //                 </>
// // // // // //               )}
// // // // // //             </>
// // // // // //           )}
// // // // // //         </div>
// // // // // //       </div>
// // // // // //     );
// // // // // //   };

// // // // // //   return (
// // // // // //     <div className={styles.solverContainer}>
// // // // // //       <div className={styles.solverCard}>
// // // // // //         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
// // // // // //         <div className={styles.inputContainer}>
// // // // // //           <div className={styles.inputGroup}>
// // // // // //             <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
// // // // // //             <div className={styles.inputWithReset}>
// // // // // //               <input
// // // // // //                 type="number"
// // // // // //                 name="a"
// // // // // //                 value={coefficients.a}
// // // // // //                 onChange={handleInputChange}
// // // // // //                 placeholder="0"
// // // // // //                 className={styles.coefficientInput}
// // // // // //               />
// // // // // //               {coefficients.a !== '' && (
// // // // // //                 <button onClick={() => handleResetCoefficient('a')} className={styles.inputResetBtn}>
// // // // // //                   <X size={14} />
// // // // // //                 </button>
// // // // // //               )}
// // // // // //             </div>
// // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // // //           </div>
          
// // // // // //           <div className={styles.inputGroup}>
// // // // // //             <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
// // // // // //             <div className={styles.inputWithReset}>
// // // // // //               <input
// // // // // //                 type="number"
// // // // // //                 name="b"
// // // // // //                 value={coefficients.b}
// // // // // //                 onChange={handleInputChange}
// // // // // //                 placeholder="0"
// // // // // //                 className={styles.coefficientInput}
// // // // // //               />
// // // // // //               {coefficients.b !== '' && (
// // // // // //                 <button onClick={() => handleResetCoefficient('b')} className={styles.inputResetBtn}>
// // // // // //                   <X size={14} />
// // // // // //                 </button>
// // // // // //               )}
// // // // // //             </div>
// // // // // //             <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // // //           </div>
          
// // // // // //           <div className={styles.inputGroup}>
// // // // // //             <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
// // // // // //             <div className={styles.inputWithReset}>
// // // // // //               <input
// // // // // //                 type="number"
// // // // // //                 name="c"
// // // // // //                 value={coefficients.c}
// // // // // //                 onChange={handleInputChange}
// // // // // //                 placeholder="0"
// // // // // //                 className={styles.coefficientInput}
// // // // // //               />
// // // // // //               {coefficients.c !== '' && (
// // // // // //                 <button onClick={() => handleResetCoefficient('c')} className={styles.inputResetBtn}>
// // // // // //                   <X size={14} />
// // // // // //                 </button>
// // // // // //               )}
// // // // // //             </div>
// // // // // //           </div>
// // // // // //           <span className={styles.operator}>=</span>
// // // // // //           <span className={styles.term}>0</span>
// // // // // //         </div>

// // // // // //         <div className={styles.buttonContainer}>
// // // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
// // // // // //           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
// // // // // //         </div>

// // // // // //         {error && <div className={styles.errorMessage}>{error}</div>}
// // // // // //         {renderResult()}
// // // // // //       </div>
// // // // // //     </div>
// // // // // //   );
// // // // // // };

// // // // // // export default QuadraticSolver;


// // // // // import React, { useState } from 'react';
// // // // // import katex from 'katex';
// // // // // import { RotateCcw } from 'lucide-react';
// // // // // import 'katex/dist/katex.min.css';
// // // // // import styles from './QuadraticSolver.module.css';

// // // // // const QuadraticSolver = ({ explanations = null }) => {
// // // // //   const initialState = {
// // // // //     coefficients: { a: '', b: '', c: '' },
// // // // //     signs: { a: '+', b: '+', c: '+' }
// // // // //   };

// // // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // // //   const [signs, setSigns] = useState(initialState.signs);
// // // // //   const [result, setResult] = useState(null);
// // // // //   const [error, setError] = useState('');
// // // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // // //   const normalizeNumber = (value) => {
// // // // //     if (value === '') return '';
// // // // //     const num = parseFloat(value);
// // // // //     return isNaN(num) ? '' : num.toString();
// // // // //   };

// // // // //   const hasAnyCoefficient = () => {
// // // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // // //   };

// // // // //   const getCurrentEquation = () => {
// // // // //     if (!hasAnyCoefficient()) return '';

// // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

// // // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // // //       const absNum = Math.abs(num);
// // // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // // //       return `${sign}${numStr}`;
// // // // //     };

// // // // //     const aStr = formatCoef(a, true);
// // // // //     const bStr = formatCoef(b, false);
// // // // //     const cStr = formatCoef(c, false, false);

// // // // //     let equation = '';
// // // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // // //     equation += ' = 0';

// // // // //     return equation.trim();
// // // // //   };

// // // // //   const renderKaTeX = (tex) => {
// // // // //     if (!tex) return { __html: '' };
// // // // //     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
// // // // //   };

// // // // //   const handleInputChange = (e) => {
// // // // //     const { name, value } = e.target;
// // // // //     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
// // // // //     setCoefficients(newCoefficients);
// // // // //     setError('');
    
// // // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // //     }
// // // // //   };

// // // // //   const handleSignChange = (e) => {
// // // // //     const { name, value } = e.target;
// // // // //     setSigns(prev => ({ ...prev, [name]: value }));
// // // // //   };

// // // // //   const handleReset = () => {
// // // // //     setCoefficients(initialState.coefficients);
// // // // //     setSigns(initialState.signs);
// // // // //     setResult(null);
// // // // //     setError('');
// // // // //     setShowComplexSolution(false);
// // // // //   };

// // // // //   const handleResetCoefficient = (coefficient) => {
// // // // //     setCoefficients(prev => ({...prev, [coefficient]: ''}));
// // // // //     setSigns(prev => ({...prev, [coefficient]: '+'}));
// // // // //   };

// // // // //   const handleShowComplexSolution = () => {
// // // // //     setShowComplexSolution(true);
// // // // //   };

// // // // //   const validateInputs = () => {
// // // // //     if (!hasAnyCoefficient()) {
// // // // //       setError('Please enter at least one coefficient');
// // // // //       return false;
// // // // //     }

// // // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // //       return false;
// // // // //     }

// // // // //     return true;
// // // // //   };

// // // // //   const solveQuadratic = () => {
// // // // //     setShowComplexSolution(false);
// // // // //     setError('');
// // // // //     setResult(null);

// // // // //     if (!validateInputs()) return;

// // // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // // //     if (a === 0 && b === 0 && c !== 0) {
// // // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // // //       return;
// // // // //     }

// // // // //     if (a === 0 && b !== 0) {
// // // // //       const x = -c / b;
// // // // //       setResult({ type: 'linear', x: x.toFixed(4) });
// // // // //       return;
// // // // //     }

// // // // //     const discriminant = b * b - 4 * a * c;

// // // // //     if (discriminant > 0) {
// // // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // // //       setResult({ type: 'real', x1: x1.toFixed(4), x2: x2.toFixed(4) });
// // // // //     } else if (discriminant === 0) {
// // // // //       const x = -b / (2 * a);
// // // // //       setResult({ type: 'equal', x: x.toFixed(4) });
// // // // //     } else {
// // // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // // //       setResult({ type: 'complex', real: realPart, imaginary: imaginaryPart });
// // // // //     }
// // // // //   };

// // // // //   const SignToggle = ({ name, value, onChange }) => (
// // // // //     <div className={styles.signToggleWrapper}>
// // // // //       <button
// // // // //         type="button"
// // // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // // //         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
// // // // //         aria-label="Toggle sign"
// // // // //       >
// // // // //         {value}
// // // // //       </button>
// // // // //       <span className={styles.tooltipText}>Click to Toggle Sign</span>
// // // // //     </div>
// // // // //   );

// // // // //   const renderResult = () => {
// // // // //     if (!result) return null;

// // // // //     return (
// // // // //       <div className={styles.resultContainer}>
// // // // //         <div className={styles.solutions}>
// // // // //           {result.type === 'linear' && (
// // // // //             <>
// // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // //               {explanations && result.type && explanations[result.type] && (
// // // // //                 <div className={styles.explanations}>
// // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // //                     <div key={index} className={styles.explanation}>
// // // // //                       {explanation.text && (
// // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // //                       )}
// // // // //                       {explanation.math && (
// // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // //                       )}
// // // // //                     </div>
// // // // //                   ))}
// // // // //                 </div>
// // // // //               )}
// // // // //             </>
// // // // //           )}

// // // // //           {result.type === 'real' && (
// // // // //             <>
// // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // // //               {explanations && result.type && explanations[result.type] && (
// // // // //                 <div className={styles.explanations}>
// // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // //                     <div key={index} className={styles.explanation}>
// // // // //                       {explanation.text && (
// // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // //                       )}
// // // // //                       {explanation.math && (
// // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // //                       )}
// // // // //                     </div>
// // // // //                   ))}
// // // // //                 </div>
// // // // //               )}
// // // // //             </>
// // // // //           )}

// // // // //           {result.type === 'equal' && (
// // // // //             <>
// // // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // // //               {explanations && result.type && explanations[result.type] && (
// // // // //                 <div className={styles.explanations}>
// // // // //                   {explanations[result.type].map((explanation, index) => (
// // // // //                     <div key={index} className={styles.explanation}>
// // // // //                       {explanation.text && (
// // // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // // //                       )}
// // // // //                       {explanation.math && (
// // // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // //                       )}
// // // // //                     </div>
// // // // //                   ))}
// // // // //                 </div>
// // // // //               )}
// // // // //             </>
// // // // //           )}

// // // // //           {result.type === 'complex' && (
// // // // //             <>
// // // // //               <p className={styles.noSolutionMessage}>
// // // // //                 There are no real number solutions for this equation
// // // // //               </p>
// // // // //               {!showComplexSolution ? (
// // // // //                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
// // // // //                   Show complex solutions
// // // // //                 </button>
// // // // //               ) : (
// // // // //                 <>
// // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // // //                   {explanations && result.type && explanations[result.type] && (
// // // // //                     <div className={styles.explanations}>
// // // // //                       {explanations[result.type].map((explanation, index) => (
// // // // //                         <div key={index} className={styles.explanation}>
// // // // //                           {explanation.text && (
// // // // //                             <p className={styles.explanationText}>{explanation.text}</p>
// // // // //                           )}
// // // // //                           {explanation.math && (
// // // // //                             <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // // //                           )}
// // // // //                         </div>
// // // // //                       ))}
// // // // //                     </div>
// // // // //                   )}
// // // // //                 </>
// // // // //               )}
// // // // //             </>
// // // // //           )}
// // // // //         </div>
// // // // //       </div>
// // // // //     );
// // // // //   };

// // // // //   return (
// // // // //     <div className={styles.solverContainer}>
// // // // //       <div className={styles.solverCard}>
// // // // //         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
// // // // //         <div className={styles.inputContainer}>
// // // // //           <div className={styles.inputGroup}>
// // // // //             <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
// // // // //             <div className={styles.inputWrapper}>
// // // // //               <input
// // // // //                 type="number"
// // // // //                 name="a"
// // // // //                 value={coefficients.a}
// // // // //                 onChange={handleInputChange}
// // // // //                 placeholder="0"
// // // // //                 className={styles.coefficientInput}
// // // // //               />
// // // // //               <button 
// // // // //                 onClick={() => handleResetCoefficient('a')} 
// // // // //                 className={styles.inlineResetBtn}
// // // // //                 title="Reset value"
// // // // //                 style={{marginRight:'8px'}}
// // // // //               >
// // // // //                 <RotateCcw size={12} />
// // // // //               </button>
// // // // //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // // //             </div>
// // // // //           </div>
          
// // // // //           <div className={styles.inputGroup}>
// // // // //             <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
// // // // //             <div className={styles.inputWrapper}>
// // // // //               <input
// // // // //                 type="number"
// // // // //                 name="b"
// // // // //                 value={coefficients.b}
// // // // //                 onChange={handleInputChange}
// // // // //                 placeholder="0"
// // // // //                 className={styles.coefficientInput}
// // // // //               />
// // // // //               <button 
// // // // //                 onClick={() => handleResetCoefficient('b')} 
// // // // //                 className={styles.inlineResetBtn}
// // // // //                 title="Reset value"
// // // // //                 style={{marginRight:'-6px'}}
// // // // //               >
// // // // //                 <RotateCcw size={12} />
// // // // //               </button>
// // // // //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // // //             </div>
// // // // //           </div>
          
// // // // //           <div className={styles.inputGroup}>
// // // // //             <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
// // // // //             <div className={styles.inputWrapper}>
// // // // //               <input
// // // // //                 type="number"
// // // // //                 name="c"
// // // // //                 value={coefficients.c}
// // // // //                 onChange={handleInputChange}
// // // // //                 placeholder="0"
// // // // //                 className={styles.coefficientInput}
// // // // //               />
// // // // //               <button 
// // // // //                 onClick={() => handleResetCoefficient('c')} 
// // // // //                 className={styles.inlineResetBtn}
// // // // //                 title="Reset value"
// // // // //                 style={{marginRight:'-20px'}}
// // // // //               >
// // // // //                 <RotateCcw size={12} />
// // // // //               </button>
// // // // //             </div>
// // // // //           </div>
// // // // //           <span className={styles.operator}>=</span>
// // // // //           <span className={styles.term}>0</span>
// // // // //         </div>

// // // // //         <div className={styles.buttonContainer}>
// // // // //           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
// // // // //           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
// // // // //         </div>

// // // // //         {error && <div className={styles.errorMessage}>{error}</div>}
// // // // //         {renderResult()}
// // // // //       </div>
// // // // //     </div>
// // // // //   );
// // // // // };

// // // // // export default QuadraticSolver;

// // // // import React, { useState } from 'react';
// // // // import katex from 'katex';
// // // // import { RotateCcw } from 'lucide-react';
// // // // import 'katex/dist/katex.min.css';
// // // // import styles from './QuadraticSolver.module.css';

// // // // const QuadraticSolver = ({ explanations = null }) => {
// // // //   const initialState = {
// // // //     coefficients: { a: '', b: '', c: '' },
// // // //     signs: { a: '+', b: '+', c: '+' }
// // // //   };

// // // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // // //   const [signs, setSigns] = useState(initialState.signs);
// // // //   const [result, setResult] = useState(null);
// // // //   const [error, setError] = useState('');
// // // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // // //   const normalizeNumber = (value) => {
// // // //     if (value === '') return '';
// // // //     const num = parseFloat(value);
// // // //     return isNaN(num) ? '' : num.toString();
// // // //   };

// // // //   const hasAnyCoefficient = () => {
// // // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // // //   };

// // // //   const getCurrentEquation = () => {
// // // //     if (!hasAnyCoefficient()) return '';

// // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

// // // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // // //       const absNum = Math.abs(num);
// // // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // // //       return `${sign}${numStr}`;
// // // //     };

// // // //     const aStr = formatCoef(a, true);
// // // //     const bStr = formatCoef(b, false);
// // // //     const cStr = formatCoef(c, false, false);

// // // //     let equation = '';
// // // //     if (aStr !== '') equation += `${aStr}x^2`;
// // // //     if (bStr !== '') equation += ` ${bStr}x`;
// // // //     if (cStr !== '') equation += ` ${cStr}`;
// // // //     equation += ' = 0';

// // // //     return equation.trim();
// // // //   };

// // // //   const renderKaTeX = (tex) => {
// // // //     if (!tex) return { __html: '' };
// // // //     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
// // // //   };

// // // //   const handleInputChange = (e) => {
// // // //     const { name, value } = e.target;
// // // //     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
// // // //     setCoefficients(newCoefficients);
// // // //     setError('');
    
// // // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // //     }
// // // //   };

// // // //   const handleSignChange = (e) => {
// // // //     const { name, value } = e.target;
// // // //     setSigns(prev => ({ ...prev, [name]: value }));
// // // //   };

// // // //   const handleReset = () => {
// // // //     setCoefficients(initialState.coefficients);
// // // //     setSigns(initialState.signs);
// // // //     setResult(null);
// // // //     setError('');
// // // //     setShowComplexSolution(false);
// // // //   };

// // // //   const handleResetCoefficient = (coefficient) => {
// // // //     setCoefficients(prev => ({...prev, [coefficient]: ''}));
// // // //     setSigns(prev => ({...prev, [coefficient]: '+'}));
// // // //   };

// // // //   const handleShowComplexSolution = () => {
// // // //     setShowComplexSolution(true);
// // // //   };

// // // //   const validateInputs = () => {
// // // //     if (!hasAnyCoefficient()) {
// // // //       setError('Please enter at least one coefficient');
// // // //       return false;
// // // //     }

// // // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // //       return false;
// // // //     }

// // // //     return true;
// // // //   };

// // // //   const solveQuadratic = () => {
// // // //     setShowComplexSolution(false);
// // // //     setError('');
// // // //     setResult(null);

// // // //     if (!validateInputs()) return;

// // // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // // //     if (a === 0 && b === 0 && c !== 0) {
// // // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // // //       return;
// // // //     }

// // // //     if (a === 0 && b !== 0) {
// // // //       const x = -c / b;
// // // //       setResult({ type: 'linear', x: x.toFixed(4) });
// // // //       return;
// // // //     }

// // // //     const discriminant = b * b - 4 * a * c;

// // // //     if (discriminant > 0) {
// // // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // // //       setResult({ type: 'real', x1: x1.toFixed(4), x2: x2.toFixed(4) });
// // // //     } else if (discriminant === 0) {
// // // //       const x = -b / (2 * a);
// // // //       setResult({ type: 'equal', x: x.toFixed(4) });
// // // //     } else {
// // // //       const realPart = (-b / (2 * a)).toFixed(4);
// // // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // // //       setResult({ 
// // // //         type: 'complex', 
// // // //         real: realPart, 
// // // //         imaginary: imaginaryPart,
// // // //         equation: { a, b, c },
// // // //         discriminant: discriminant
// // // //       });
// // // //     }
// // // //   };

// // // //   const SignToggle = ({ name, value, onChange }) => (
// // // //     <div className={styles.signToggleWrapper}>
// // // //       <button
// // // //         type="button"
// // // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // // //         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
// // // //         aria-label="Toggle sign"
// // // //       >
// // // //         {value}
// // // //       </button>
// // // //       <span className={styles.tooltipText}>Click to Toggle Sign</span>
// // // //     </div>
// // // //   );

// // // //   const renderResult = () => {
// // // //     if (!result) return null;

// // // //     return (
// // // //       <div className={styles.resultContainer}>
// // // //         <div className={styles.solutions}>
// // // //           {result.type === 'linear' && (
// // // //             <>
// // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // //               {explanations && result.type && explanations[result.type] && (
// // // //                 <div className={styles.explanations}>
// // // //                   {explanations[result.type].map((explanation, index) => (
// // // //                     <div key={index} className={styles.explanation}>
// // // //                       {explanation.text && (
// // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // //                       )}
// // // //                       {explanation.math && (
// // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // //                       )}
// // // //                     </div>
// // // //                   ))}
// // // //                 </div>
// // // //               )}
// // // //             </>
// // // //           )}

// // // //           {result.type === 'real' && (
// // // //             <>
// // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // // //               {explanations && result.type && explanations[result.type] && (
// // // //                 <div className={styles.explanations}>
// // // //                   {explanations[result.type].map((explanation, index) => (
// // // //                     <div key={index} className={styles.explanation}>
// // // //                       {explanation.text && (
// // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // //                       )}
// // // //                       {explanation.math && (
// // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // //                       )}
// // // //                     </div>
// // // //                   ))}
// // // //                 </div>
// // // //               )}
// // // //             </>
// // // //           )}

// // // //           {result.type === 'equal' && (
// // // //             <>
// // // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // // //               {explanations && result.type && explanations[result.type] && (
// // // //                 <div className={styles.explanations}>
// // // //                   {explanations[result.type].map((explanation, index) => (
// // // //                     <div key={index} className={styles.explanation}>
// // // //                       {explanation.text && (
// // // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // // //                       )}
// // // //                       {explanation.math && (
// // // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // //                       )}
// // // //                     </div>
// // // //                   ))}
// // // //                 </div>
// // // //               )}
// // // //             </>
// // // //           )}

// // // //           {result.type === 'complex' && (
// // // //             <>
// // // //               <div className={styles.noSolutionMessage}>
// // // //                 <p>There are no real number solutions for this equation because:</p>
// // // //                 <p dangerouslySetInnerHTML={renderKaTeX(`\\text{discriminant} = b^2 - 4ac = (${result.equation.b})^2 - 4(${result.equation.a})(${result.equation.c}) = ${result.equation.b * result.equation.b} - ${4 * result.equation.a * result.equation.c} = ${result.discriminant}`)} />
// // // //                 <p>Since the discriminant is negative, there are no real solutions</p>
// // // //               </div>
// // // //               {!showComplexSolution ? (
// // // //                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
// // // //                   Show complex solutions
// // // //                 </button>
// // // //               ) : (
// // // //                 <>
// // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // // //                   {explanations && result.type && explanations[result.type] && (
// // // //                     <div className={styles.explanations}>
// // // //                       {explanations[result.type].map((explanation, index) => (
// // // //                         <div key={index} className={styles.explanation}>
// // // //                           {explanation.text && (
// // // //                             <p className={styles.explanationText}>{explanation.text}</p>
// // // //                           )}
// // // //                           {explanation.math && (
// // // //                             <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // // //                           )}
// // // //                         </div>
// // // //                       ))}
// // // //                     </div>
// // // //                   )}
// // // //                 </>
// // // //               )}
// // // //             </>
// // // //           )}
// // // //         </div>
// // // //       </div>
// // // //     );
// // // //   };

// // // //   return (
// // // //     <div className={styles.solverContainer}>
// // // //       <div className={styles.solverCard}>
// // // //         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
// // // //         <div className={styles.inputContainer}>
// // // //           <div className={styles.inputGroup}>
// // // //             <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
// // // //             <div className={styles.inputWrapper}>
// // // //               <input
// // // //                 type="number"
// // // //                 name="a"
// // // //                 value={coefficients.a}
// // // //                 onChange={handleInputChange}
// // // //                 placeholder="0"
// // // //                 className={styles.coefficientInput}
// // // //               />
// // // //               <button 
// // // //                 onClick={() => handleResetCoefficient('a')} 
// // // //                 className={styles.inlineResetBtn}
// // // //                 title="Reset value"
// // // //                 style={{marginRight:'8px'}}
// // // //               >
// // // //                 <RotateCcw size={12} />
// // // //               </button>
// // // //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // // //             </div>
// // // //           </div>
          
// // // //           <div className={styles.inputGroup}>
// // // //             <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
// // // //             <div className={styles.inputWrapper}>
// // // //               <input
// // // //                 type="number"
// // // //                 name="b"
// // // //                 value={coefficients.b}
// // // //                 onChange={handleInputChange}
// // // //                 placeholder="0"
// // // //                 className={styles.coefficientInput}
// // // //               />
// // // //               <button 
// // // //                 onClick={() => handleResetCoefficient('b')} 
// // // //                 className={styles.inlineResetBtn}
// // // //                 title="Reset value"
// // // //                 style={{marginRight:'-6px'}}
// // // //               >
// // // //                 <RotateCcw size={12} />
// // // //               </button>
// // // //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // // //             </div>
// // // //           </div>
          
// // // //           <div className={styles.inputGroup}>
// // // //             <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
// // // //             <div className={styles.inputWrapper}>
// // // //               <input
// // // //                 type="number"
// // // //                 name="c"
// // // //                 value={coefficients.c}
// // // //                 onChange={handleInputChange}
// // // //                 placeholder="0"
// // // //                 className={styles.coefficientInput}
// // // //               />
// // // //               <button 
// // // //                 onClick={() => handleResetCoefficient('c')} 
// // // //                 className={styles.inlineResetBtn}
// // // //                 title="Reset value"
// // // //                 style={{marginRight:'-20px'}}
// // // //               >
// // // //                 <RotateCcw size={12} />
// // // //               </button>
// // // //             </div>
// // // //           </div>
// // // //           <span className={styles.operator}>=</span>
// // // //           <span className={styles.term}>0</span>
// // // //         </div>

// // // //         <div className={styles.buttonContainer}>
// // // //           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
// // // //           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
// // // //         </div>

// // // //         {error && <div className={styles.errorMessage}>{error}</div>}
// // // //         {renderResult()}
// // // //       </div>
// // // //     </div>
// // // //   );
// // // // };

// // // // export default QuadraticSolver;



// // // import React, { useState } from 'react';
// // // import katex from 'katex';
// // // import { RotateCcw } from 'lucide-react';
// // // import 'katex/dist/katex.min.css';
// // // import styles from './QuadraticSolver.module.css';

// // // const QuadraticSolver = ({ explanations = null }) => {
// // //   const initialState = {
// // //     coefficients: { a: '', b: '', c: '' },
// // //     signs: { a: '+', b: '+', c: '+' }
// // //   };

// // //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// // //   const [signs, setSigns] = useState(initialState.signs);
// // //   const [result, setResult] = useState(null);
// // //   const [error, setError] = useState('');
// // //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// // //   const normalizeNumber = (value) => {
// // //     if (value === '') return '';
// // //     const num = parseFloat(value);
// // //     return isNaN(num) ? '' : num.toString();
// // //   };

// // //   const hasAnyCoefficient = () => {
// // //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// // //   };

// // //   const getCurrentEquation = () => {
// // //     if (!hasAnyCoefficient()) return '';

// // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

// // //     const formatCoef = (num, isFirst = false, hasX = true) => {
// // //       if (num === 0 && !(!hasX && isFirst)) return '';
// // //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// // //       const absNum = Math.abs(num);
// // //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// // //       return `${sign}${numStr}`;
// // //     };

// // //     const aStr = formatCoef(a, true);
// // //     const bStr = formatCoef(b, false);
// // //     const cStr = formatCoef(c, false, false);

// // //     let equation = '';
// // //     if (aStr !== '') equation += `${aStr}x^2`;
// // //     if (bStr !== '') equation += ` ${bStr}x`;
// // //     if (cStr !== '') equation += ` ${cStr}`;
// // //     equation += ' = 0';

// // //     return equation.trim();
// // //   };

// // //   const renderKaTeX = (tex) => {
// // //     if (!tex) return { __html: '' };
// // //     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
// // //   };

// // //   const handleInputChange = (e) => {
// // //     const { name, value } = e.target;
// // //     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
// // //     setCoefficients(newCoefficients);
// // //     setError('');
    
// // //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // //     }
// // //   };

// // //   const handleSignChange = (e) => {
// // //     const { name, value } = e.target;
// // //     setSigns(prev => ({ ...prev, [name]: value }));
// // //   };

// // //   const handleReset = () => {
// // //     setCoefficients(initialState.coefficients);
// // //     setSigns(initialState.signs);
// // //     setResult(null);
// // //     setError('');
// // //     setShowComplexSolution(false);
// // //   };

// // //   const handleResetCoefficient = (coefficient) => {
// // //     setCoefficients(prev => ({...prev, [coefficient]: ''}));
// // //     setSigns(prev => ({...prev, [coefficient]: '+'}));
// // //   };

// // //   const handleShowComplexSolution = () => {
// // //     setShowComplexSolution(true);
// // //   };

// // //   const validateInputs = () => {
// // //     if (!hasAnyCoefficient()) {
// // //       setError('Please enter at least one coefficient');
// // //       return false;
// // //     }

// // //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // //       return false;
// // //     }

// // //     return true;
// // //   };

// // //   const solveQuadratic = () => {
// // //     setShowComplexSolution(false);
// // //     setError('');
// // //     setResult(null);

// // //     if (!validateInputs()) return;

// // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // //     if (a === 0 && b === 0 && c !== 0) {
// // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // //       return;
// // //     }

// // //     if (a === 0 && b !== 0) {
// // //       const x = -c / b;
// // //       setResult({ type: 'linear', x: x.toFixed(4) });
// // //       return;
// // //     }

// // //     const discriminant = b * b - 4 * a * c;

// // //     if (discriminant > 0) {
// // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // //       setResult({ type: 'real', x1: x1.toFixed(4), x2: x2.toFixed(4) });
// // //     } else if (discriminant === 0) {
// // //       const x = -b / (2 * a);
// // //       setResult({ type: 'equal', x: x.toFixed(4) });
// // //     } else {
// // //       const realPart = (-b / (2 * a)).toFixed(4);
// // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // //       setResult({ 
// // //         type: 'complex', 
// // //         real: realPart, 
// // //         imaginary: imaginaryPart
// // //       });
// // //     }
// // //   };

// // //   const SignToggle = ({ name, value, onChange }) => (
// // //     <div className={styles.signToggleWrapper}>
// // //       <button
// // //         type="button"
// // //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// // //         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
// // //         aria-label="Toggle sign"
// // //       >
// // //         {value}
// // //       </button>
// // //       <span className={styles.tooltipText}>Click to Toggle Sign</span>
// // //     </div>
// // //   );

// // //   const renderResult = () => {
// // //     if (!result) return null;

// // //     return (
// // //       <div className={styles.resultContainer}>
// // //         <div className={styles.solutions}>
// // //           {result.type === 'linear' && (
// // //             <>
// // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // //               {explanations && result.type && explanations[result.type] && (
// // //                 <div className={styles.explanations}>
// // //                   {explanations[result.type].map((explanation, index) => (
// // //                     <div key={index} className={styles.explanation}>
// // //                       {explanation.text && (
// // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // //                       )}
// // //                       {explanation.math && (
// // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // //                       )}
// // //                     </div>
// // //                   ))}
// // //                 </div>
// // //               )}
// // //             </>
// // //           )}

// // //           {result.type === 'real' && (
// // //             <>
// // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// // //               {explanations && result.type && explanations[result.type] && (
// // //                 <div className={styles.explanations}>
// // //                   {explanations[result.type].map((explanation, index) => (
// // //                     <div key={index} className={styles.explanation}>
// // //                       {explanation.text && (
// // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // //                       )}
// // //                       {explanation.math && (
// // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // //                       )}
// // //                     </div>
// // //                   ))}
// // //                 </div>
// // //               )}
// // //             </>
// // //           )}

// // //           {result.type === 'equal' && (
// // //             <>
// // //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// // //               {explanations && result.type && explanations[result.type] && (
// // //                 <div className={styles.explanations}>
// // //                   {explanations[result.type].map((explanation, index) => (
// // //                     <div key={index} className={styles.explanation}>
// // //                       {explanation.text && (
// // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // //                       )}
// // //                       {explanation.math && (
// // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // //                       )}
// // //                     </div>
// // //                   ))}
// // //                 </div>
// // //               )}
// // //             </>
// // //           )}

// // //           {result.type === 'complex' && (
// // //             <>
// // //               {explanations && result.type && explanations[result.type] && (
// // //                 <div className={styles.explanations}>
// // //                   {explanations[result.type].map((explanation, index) => (
// // //                     <div key={index} className={styles.explanation}>
// // //                       {explanation.text && (
// // //                         <p className={styles.explanationText}>{explanation.text}</p>
// // //                       )}
// // //                       {explanation.math && (
// // //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// // //                       )}
// // //                     </div>
// // //                   ))}
// // //                 </div>
// // //               )}
// // //               {!showComplexSolution ? (
// // //                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
// // //                   Show complex solutions
// // //                 </button>
// // //               ) : (
// // //                 <>
// // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// // //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// // //                 </>
// // //               )}
// // //             </>
// // //           )}
// // //         </div>
// // //       </div>
// // //     );
// // //   };

// // //   return (
// // //     <div className={styles.solverContainer}>
// // //       <div className={styles.solverCard}>
// // //         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
// // //         <div className={styles.inputContainer}>
// // //           <div className={styles.inputGroup}>
// // //             <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
// // //             <div className={styles.inputWrapper}>
// // //               <input
// // //                 type="number"
// // //                 name="a"
// // //                 value={coefficients.a}
// // //                 onChange={handleInputChange}
// // //                 placeholder="0"
// // //                 className={styles.coefficientInput}
// // //               />
// // //               <button 
// // //                 onClick={() => handleResetCoefficient('a')} 
// // //                 className={styles.inlineResetBtn}
// // //                 title="Reset value"
// // //                 style={{marginRight:'8px'}}
// // //               >
// // //                 <RotateCcw size={12} />
// // //               </button>
// // //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// // //             </div>
// // //           </div>
          
// // //           <div className={styles.inputGroup}>
// // //             <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
// // //             <div className={styles.inputWrapper}>
// // //               <input
// // //                 type="number"
// // //                 name="b"
// // //                 value={coefficients.b}
// // //                 onChange={handleInputChange}
// // //                 placeholder="0"
// // //                 className={styles.coefficientInput}
// // //               />
// // //               <button 
// // //                 onClick={() => handleResetCoefficient('b')} 
// // //                 className={styles.inlineResetBtn}
// // //                 title="Reset value"
// // //                 style={{marginRight:'-6px'}}
// // //               >
// // //                 <RotateCcw size={12} />
// // //               </button>
// // //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// // //             </div>
// // //           </div>
          
// // //           <div className={styles.inputGroup}>
// // //             <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
// // //             <div className={styles.inputWrapper}>
// // //               <input
// // //                 type="number"
// // //                 name="c"
// // //                 value={coefficients.c}
// // //                 onChange={handleInputChange}
// // //                 placeholder="0"
// // //                 className={styles.coefficientInput}
// // //               />
// // //               <button 
// // //                 onClick={() => handleResetCoefficient('c')} 
// // //                 className={styles.inlineResetBtn}
// // //                 title="Reset value"
// // //                 style={{marginRight:'-20px'}}
// // //               >
// // //                 <RotateCcw size={12} />
// // //               </button>
// // //             </div>
// // //           </div>
// // //           <span className={styles.operator}>=</span>
// // //           <span className={styles.term}>0</span>
// // //         </div>

// // //         <div className={styles.buttonContainer}>
// // //           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
// // //           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
// // //         </div>

// // //         {error && <div className={styles.errorMessage}>{error}</div>}
// // //         {renderResult()}
// // //       </div>
// // //     </div>
// // //   );
// // // };

// // // export default QuadraticSolver;


// // import React, { useState } from 'react';
// // import katex from 'katex';
// // import { RotateCcw } from 'lucide-react';
// // import 'katex/dist/katex.min.css';
// // import { generateQuadraticExplanations } from './quadraticExplanations';
// // import styles from './QuadraticSolver.module.css';

// // const QuadraticSolver = () => {
// //   const initialState = {
// //     coefficients: { a: '', b: '', c: '' },
// //     signs: { a: '+', b: '+', c: '+' }
// //   };

// //   const [coefficients, setCoefficients] = useState(initialState.coefficients);
// //   const [signs, setSigns] = useState(initialState.signs);
// //   const [result, setResult] = useState(null);
// //   const [error, setError] = useState('');
// //   const [showComplexSolution, setShowComplexSolution] = useState(false);

// //   const normalizeNumber = (value) => {
// //     if (value === '') return '';
// //     const num = parseFloat(value);
// //     return isNaN(num) ? '' : num.toString();
// //   };

// //   const hasAnyCoefficient = () => {
// //     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
// //   };

// //   const getCurrentEquation = () => {
// //     if (!hasAnyCoefficient()) return '';

// //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

// //     const formatCoef = (num, isFirst = false, hasX = true) => {
// //       if (num === 0 && !(!hasX && isFirst)) return '';
// //       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
// //       const absNum = Math.abs(num);
// //       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
// //       return `${sign}${numStr}`;
// //     };

// //     const aStr = formatCoef(a, true);
// //     const bStr = formatCoef(b, false);
// //     const cStr = formatCoef(c, false, false);

// //     let equation = '';
// //     if (aStr !== '') equation += `${aStr}x^2`;
// //     if (bStr !== '') equation += ` ${bStr}x`;
// //     if (cStr !== '') equation += ` ${cStr}`;
// //     equation += ' = 0';

// //     return equation.trim();
// //   };

// //   const renderKaTeX = (tex) => {
// //     if (!tex) return { __html: '' };
// //     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
// //   };

// //   const handleInputChange = (e) => {
// //     const { name, value } = e.target;
// //     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
// //     setCoefficients(newCoefficients);
// //     setError('');
    
// //     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
// //       setError('Please enter at least one coefficient for x or xÂ² terms');
// //     }
// //   };

// //   const handleSignChange = (e) => {
// //     const { name, value } = e.target;
// //     setSigns(prev => ({ ...prev, [name]: value }));
// //   };

// //   const handleReset = () => {
// //     setCoefficients(initialState.coefficients);
// //     setSigns(initialState.signs);
// //     setResult(null);
// //     setError('');
// //     setShowComplexSolution(false);
// //   };

// //   const handleResetCoefficient = (coefficient) => {
// //     setCoefficients(prev => ({...prev, [coefficient]: ''}));
// //     setSigns(prev => ({...prev, [coefficient]: '+'}));
// //   };

// //   const handleShowComplexSolution = () => {
// //     setShowComplexSolution(true);
// //   };

// //   const validateInputs = () => {
// //     if (!hasAnyCoefficient()) {
// //       setError('Please enter at least one coefficient');
// //       return false;
// //     }

// //     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
// //       setError('Please enter at least one coefficient for x or xÂ² terms');
// //       return false;
// //     }

// //     return true;
// //   };

// // //   const solveQuadratic = () => {
// // //     setShowComplexSolution(false);
// // //     setError('');
// // //     setResult(null);

// // //     if (!validateInputs()) return;

// // //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// // //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// // //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

// // //     if (a === 0 && b === 0 && c !== 0) {
// // //       setError('Please enter at least one coefficient for x or xÂ² terms');
// // //       return;
// // //     }

// // //     if (a === 0 && b !== 0) {
// // //       const x = -c / b;
// // //       setResult({ 
// // //         type: 'linear', 
// // //         x: x.toFixed(4),
// // //         explanations: generateQuadraticExplanations(a, b, c)
// // //       });
// // //       return;
// // //     }

// // //     const discriminant = b * b - 4 * a * c;

// // //     if (discriminant > 0) {
// // //       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// // //       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// // //       setResult({ 
// // //         type: 'real', 
// // //         x1: x1.toFixed(4), 
// // //         x2: x2.toFixed(4),
// // //         explanations: generateQuadraticExplanations(a, b, c, discriminant)
// // //       });
// // //     } else if (discriminant === 0) {
// // //       const x = -b / (2 * a);
// // //       setResult({ 
// // //         type: 'equal', 
// // //         x: x.toFixed(4),
// // //         explanations: generateQuadraticExplanations(a, b, c, discriminant)
// // //       });
// // //     } else {
// // //       const realPart = (-b / (2 * a)).toFixed(4);
// // //       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// // //       setResult({ 
// // //         type: 'complex', 
// // //         real: realPart, 
// // //         imaginary: imaginaryPart,
// // //         explanations: generateQuadraticExplanations(a, b, c, discriminant)
// // //       });
// // //     }
// // //   };

 
// // const solveQuadratic = () => {
// //     setShowComplexSolution(false);
// //     setError('');
// //     setResult(null);

// //     if (!validateInputs()) return;

// //     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
// //     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
// //     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);
// //     const discriminant = b * b - 4 * a * c;  // Calculate discriminant here for all cases

// //     if (a === 0 && b === 0 && c !== 0) {
// //         setError('Please enter at least one coefficient for x or xÂ² terms');
// //         return;
// //     }

// //     if (a === 0 && b !== 0) {
// //         const x = -c / b;
// //         setResult({ 
// //             type: 'linear', 
// //             x: x.toFixed(4),
// //             explanations: generateQuadraticExplanations(a, b, c, discriminant).linear
// //         });
// //         return;
// //     }

// //     if (discriminant > 0) {
// //         const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
// //         const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
// //         setResult({ 
// //             type: 'real', 
// //             x1: x1.toFixed(4), 
// //             x2: x2.toFixed(4),
// //             explanations: generateQuadraticExplanations(a, b, c, discriminant).real
// //         });
// //     } else if (discriminant === 0) {
// //         const x = -b / (2 * a);
// //         setResult({ 
// //             type: 'equal', 
// //             x: x.toFixed(4),
// //             explanations: generateQuadraticExplanations(a, b, c, discriminant).equal
// //         });
// //     } else {
// //         const realPart = (-b / (2 * a)).toFixed(4);
// //         const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
// //         setResult({ 
// //             type: 'complex', 
// //             real: realPart, 
// //             imaginary: imaginaryPart,
// //             explanations: generateQuadraticExplanations(a, b, c, discriminant).complex
// //         });
// //     }
// // };

// // const SignToggle = ({ name, value, onChange }) => (
// //     <div className={styles.signToggleWrapper}>
// //       <button
// //         type="button"
// //         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
// //         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
// //         aria-label="Toggle sign"
// //       >
// //         {value}
// //       </button>
// //       <span className={styles.tooltipText}>Click to Toggle Sign</span>
// //     </div>
// //   );

// //   const renderResult = () => {
// //     if (!result) return null;

// //     return (
// //       <div className={styles.resultContainer}>
// //         <div className={styles.solutions}>
// //           {result.type === 'linear' && (
// //             <>
// //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// //               {result.explanations.initial.map((explanation, index) => (
// //                 <div key={index} className={styles.explanation}>
// //                   {explanation.text && (
// //                     <p className={styles.explanationText}>{explanation.text}</p>
// //                   )}
// //                   {explanation.math && (
// //                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// //                   )}
// //                 </div>
// //               ))}
// //             </>
// //           )}

// //           {result.type === 'real' && (
// //             <>
// //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
// //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
// //               {result.explanations.initial.map((explanation, index) => (
// //                 <div key={index} className={styles.explanation}>
// //                   {explanation.text && (
// //                     <p className={styles.explanationText}>{explanation.text}</p>
// //                   )}
// //                   {explanation.math && (
// //                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// //                   )}
// //                 </div>
// //               ))}
// //             </>
// //           )}

// //           {result.type === 'equal' && (
// //             <>
// //               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
// //               {result.explanations.initial.map((explanation, index) => (
// //                 <div key={index} className={styles.explanation}>
// //                   {explanation.text && (
// //                     <p className={styles.explanationText}>{explanation.text}</p>
// //                   )}
// //                   {explanation.math && (
// //                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// //                   )}
// //                 </div>
// //               ))}
// //             </>
// //           )}

// //           {result.type === 'complex' && (
// //             <>
// //               {/* Show initial explanation about why there are no real solutions */}
// //               {result.explanations.initial.map((explanation, index) => (
// //                 <div key={index} className={styles.explanation}>
// //                   {explanation.text && (
// //                     <p className={styles.explanationText}>{explanation.text}</p>
// //                   )}
// //                   {explanation.math && (
// //                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// //                   )}
// //                 </div>
// //               ))}
              
// //               {!showComplexSolution ? (
// //                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
// //                   Show complex solutions
// //                 </button>
// //               ) : (
// //                 <>
// //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
// //                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
// //                   {/* Show detailed explanations only after button click */}
// //                   {result.explanations.detailed.map((explanation, index) => (
// //                     <div key={index} className={styles.explanation}>
// //                       {explanation.text && (
// //                         <p className={styles.explanationText}>{explanation.text}</p>
// //                       )}
// //                       {explanation.math && (
// //                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
// //                       )}
// //                     </div>
// //                   ))}
// //                 </>
// //               )}
// //             </>
// //           )}
// //         </div>
// //       </div>
// //     );
// //   };

// //   return (
// //     <div className={styles.solverContainer}>
// //       <div className={styles.solverCard}>
// //         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
// //         <div className={styles.inputContainer}>
// //           <div className={styles.inputGroup}>
// //             <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
// //             <div className={styles.inputWrapper}>
// //               <input
// //                 type="number"
// //                 name="a"
// //                 value={coefficients.a}
// //                 onChange={handleInputChange}
// //                 placeholder="0"
// //                 className={styles.coefficientInput}
// //               />
// //               <button 
// //                 onClick={() => handleResetCoefficient('a')} 
// //                 className={styles.inlineResetBtn}
// //                 title="Reset value"
// //               >
// //                 <RotateCcw size={12} />
// //               </button>
// //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
// //             </div>
// //           </div>
          
// //           <div className={styles.inputGroup}>
// //             <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
// //             <div className={styles.inputWrapper}>
// //               <input
// //                 type="number"
// //                 name="b"
// //                 value={coefficients.b}
// //                 onChange={handleInputChange}
// //                 placeholder="0"
// //                 className={styles.coefficientInput}
// //               />
// //               <button 
// //                 onClick={() => handleResetCoefficient('b')} 
// //                 className={styles.inlineResetBtn}
// //                 title="Reset value"
// //               >
// //                 <RotateCcw size={12} />
// //               </button>
// //               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
// //             </div>
// //           </div>
          
// //           <div className={styles.inputGroup}>
// //             <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
// //             <div className={styles.inputWrapper}>
// //               <input
// //                 type="number"
// //                 name="c"
// //                 value={coefficients.c}
// //                 onChange={handleInputChange}
// //                 placeholder="0"
// //                 className={styles.coefficientInput}
// //               />
// //               <button 
// //                 onClick={() => handleResetCoefficient('c')} 
// //                 className={styles.inlineResetBtn}
// //                 title="Reset value"
// //               >
// //                 <RotateCcw size={12} />
// //               </button>
// //             </div>
// //           </div>
// //           <span className={styles.operator}>=</span>
// //           <span className={styles.term}>0</span>
// //         </div>

// //         <div className={styles.buttonContainer}>
// //           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
// //           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
// //         </div>

// //         {error && <div className={styles.errorMessage}>{error}</div>}
// //         {renderResult()}
// //       </div>
// //     </div>
// //   );
// // };

// // export default QuadraticSolver;

// import React, { useState } from 'react';
// import katex from 'katex';
// import { RotateCcw } from 'lucide-react';
// import 'katex/dist/katex.min.css';
// import { generateQuadraticExplanations } from './quadraticExplanations';
// import styles from './QuadraticSolver.module.css';

// const QuadraticSolver = () => {
//   const initialState = {
//     coefficients: { a: '', b: '', c: '' },
//     signs: { a: '+', b: '+', c: '+' }
//   };

//   const [coefficients, setCoefficients] = useState(initialState.coefficients);
//   const [signs, setSigns] = useState(initialState.signs);
//   const [result, setResult] = useState(null);
//   const [error, setError] = useState('');
//   const [showComplexSolution, setShowComplexSolution] = useState(false);

//   const normalizeNumber = (value) => {
//     if (value === '') return '';
//     const num = parseFloat(value);
//     return isNaN(num) ? '' : num.toString();
//   };

//   const hasAnyCoefficient = () => {
//     return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
//   };

//   const getCurrentEquation = () => {
//     if (!hasAnyCoefficient()) return '';

//     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
//     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
//     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

//     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

//     const formatCoef = (num, isFirst = false, hasX = true) => {
//       if (num === 0 && !(!hasX && isFirst)) return '';
//       const sign = num < 0 ? '-' : (isFirst ? '' : '+');
//       const absNum = Math.abs(num);
//       const numStr = absNum === 1 && hasX ? '' : absNum.toString();
//       return `${sign}${numStr}`;
//     };

//     const aStr = formatCoef(a, true);
//     const bStr = formatCoef(b, false);
//     const cStr = formatCoef(c, false, false);

//     let equation = '';
//     if (aStr !== '') equation += `${aStr}x^2`;
//     if (bStr !== '') equation += ` ${bStr}x`;
//     if (cStr !== '') equation += ` ${cStr}`;
//     equation += ' = 0';

//     return equation.trim();
//   };

//   const renderKaTeX = (tex) => {
//     if (!tex) return { __html: '' };
//     return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
//   };

//   const handleInputChange = (e) => {
//     const { name, value } = e.target;
//     const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
//     setCoefficients(newCoefficients);
//     setError('');
    
//     if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
//       setError('Please enter at least one coefficient for x or xÂ² terms');
//     }
//   };

//   const handleSignChange = (e) => {
//     const { name, value } = e.target;
//     setSigns(prev => ({ ...prev, [name]: value }));
//   };

//   const handleReset = () => {
//     setCoefficients(initialState.coefficients);
//     setSigns(initialState.signs);
//     setResult(null);
//     setError('');
//     setShowComplexSolution(false);
//   };

//   const handleResetCoefficient = (coefficient) => {
//     setCoefficients(prev => ({...prev, [coefficient]: ''}));
//     setSigns(prev => ({...prev, [coefficient]: '+'}));
//   };

//   const handleShowComplexSolution = () => {
//     setShowComplexSolution(true);
//   };

//   const validateInputs = () => {
//     if (!hasAnyCoefficient()) {
//       setError('Please enter at least one coefficient');
//       return false;
//     }

//     if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
//       setError('Please enter at least one coefficient for x or xÂ² terms');
//       return false;
//     }

//     return true;
//   };

//   const solveQuadratic = () => {
//     setShowComplexSolution(false);
//     setError('');
//     setResult(null);

//     if (!validateInputs()) return;

//     const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
//     const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
//     const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);
//     const discriminant = b * b - 4 * a * c;

//     if (a === 0 && b === 0 && c !== 0) {
//       setError('Please enter at least one coefficient for x or xÂ² terms');
//       return;
//     }

//     if (a === 0 && b !== 0) {
//       const x = -c / b;
//       setResult({ 
//         type: 'linear', 
//         x: x.toFixed(4),
//         explanations: generateQuadraticExplanations(a, b, c, discriminant).linear
//       });
//       return;
//     }

//     if (discriminant > 0) {
//       const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
//       const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
//       setResult({ 
//         type: 'real', 
//         x1: x1.toFixed(4), 
//         x2: x2.toFixed(4),
//         explanations: generateQuadraticExplanations(a, b, c, discriminant).real
//       });
//     } else if (discriminant === 0) {
//       const x = -b / (2 * a);
//       setResult({ 
//         type: 'equal', 
//         x: x.toFixed(4),
//         explanations: generateQuadraticExplanations(a, b, c, discriminant).equal
//       });
//     } else {
//       const realPart = (-b / (2 * a)).toFixed(4);
//       const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
//       setResult({ 
//         type: 'complex', 
//         real: realPart, 
//         imaginary: imaginaryPart,
//         explanations: generateQuadraticExplanations(a, b, c, discriminant).complex
//       });
//     }
//   };

//   const SignToggle = ({ name, value, onChange }) => (
//     <div className={styles.signToggleWrapper}>
//       <button
//         type="button"
//         className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
//         onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
//         aria-label="Toggle sign"
//       >
//         {value}
//       </button>
//       <span className={styles.tooltipText}>Click to Toggle Sign</span>
//     </div>
//   );

//   const renderResult = () => {
//     if (!result) return null;

//     return (
//       <div className={styles.resultContainer}>
//         <div className={styles.solutions}>
//           {result.type === 'linear' && (
//             <>
//               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
//               {result.explanations.initial.map((explanation, index) => (
//                 <div key={index} className={styles.explanation}>
//                   {explanation.text && (
//                     <p className={styles.explanationText}>{explanation.text}</p>
//                   )}
//                   {explanation.math && (
//                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
//                   )}
//                 </div>
//               ))}
//             </>
//           )}

//           {result.type === 'real' && (
//             <>
//               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
//               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
//               {result.explanations.initial.map((explanation, index) => (
//                 <div key={index} className={styles.explanation}>
//                   {explanation.text && (
//                     <p className={styles.explanationText}>{explanation.text}</p>
//                   )}
//                   {explanation.math && (
//                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
//                   )}
//                 </div>
//               ))}
//             </>
//           )}

//           {result.type === 'equal' && (
//             <>
//               <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
//               {result.explanations.initial.map((explanation, index) => (
//                 <div key={index} className={styles.explanation}>
//                   {explanation.text && (
//                     <p className={styles.explanationText}>{explanation.text}</p>
//                   )}
//                   {explanation.math && (
//                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
//                   )}
//                 </div>
//               ))}
//             </>
//           )}

//           {result.type === 'complex' && (
//             <>
//               {result.explanations.initial.map((explanation, index) => (
//                 <div key={index} className={styles.explanation}>
//                   {explanation.text && (
//                     <p className={styles.explanationText}>{explanation.text}</p>
//                   )}
//                   {explanation.math && (
//                     <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
//                   )}
//                 </div>
//               ))}
              
//               {!showComplexSolution ? (
//                 <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
//                   Show complex solutions
//                 </button>
//               ) : (
//                 <>
//                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
//                   <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
//                   {result.explanations.detailed.map((explanation, index) => (
//                     <div key={index} className={styles.explanation}>
//                       {explanation.text && (
//                         <p className={styles.explanationText}>{explanation.text}</p>
//                       )}
//                       {explanation.math && (
//                         <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
//                       )}
//                     </div>
//                   ))}
//                 </>
//               )}
//             </>
//           )}
//         </div>
//       </div>
//     );
//   };

//   return (
//     <div className={styles.solverContainer}>
//       <div className={`${styles.solverCard} ${styles.inputColumn}`}>
//         <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
        
//         <div className={styles.inputContainer}>
//           <div className={styles.inputGroup}>
//             <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
//             <div className={styles.inputWrapper}>
//               <input
//                 type="number"
//                 name="a"
//                 value={coefficients.a}
//                 onChange={handleInputChange}
//                 placeholder="0"
//                 className={styles.coefficientInput}
//               />
//               <button 
//                 onClick={() => handleResetCoefficient('a')} 
//                 className={styles.inlineResetBtn}
//                 title="Reset value"
//               >
//                 <RotateCcw size={12} />
//               </button>
//               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
//             </div>
//           </div>
          
//           <div className={styles.inputGroup}>
//             <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
//             <div className={styles.inputWrapper}>
//               <input
//                 type="number"
//                 name="b"
//                 value={coefficients.b}
//                 onChange={handleInputChange}
//                 placeholder="0"
//                 className={styles.coefficientInput}
//               />
//               <button 
//                 onClick={() => handleResetCoefficient('b')} 
//                 className={styles.inlineResetBtn}
//                 title="Reset value"
//               >
//                 <RotateCcw size={12} />
//               </button>
//               <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
//             </div>
//           </div>
          
//           <div className={styles.inputGroup}>
//             <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
//             <div className={styles.inputWrapper}>
//               <input
//                 type="number"
//                 name="c"
//                 value={coefficients.c}
//                 onChange={handleInputChange}
//                 placeholder="0"
//                 className={styles.coefficientInput}
//               />
//               <button 
//                 onClick={() => handleResetCoefficient('c')} 
//                 className={styles.inlineResetBtn}
//                 title="Reset value"
//                 style={{marginRight:'-20px'}}
//               >
//                 <RotateCcw size={12} />
//               </button>
//             </div>
//           </div>
//           <span className={styles.operator}>=</span>
//           <span className={styles.term}>0</span>
//         </div>

//         <div className={styles.buttonContainer}>
//           <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
//           <button onClick={handleReset} className={styles.resetButton}>Reset</button>
//         </div>

//         {error && <div className={styles.errorMessage}>{error}</div>}
//       </div>
//       {renderResult()}
//     </div>
//   );
// };

// export default QuadraticSolver;

import React, { useState } from 'react';
import katex from 'katex';
import { RotateCcw } from 'lucide-react';
import 'katex/dist/katex.min.css';
// import { generateQuadraticExplanations } from './quadraticExplanations';
import styles from './QuadraticSolver.module.css';

const QuadraticSolver = ({generateQuadraticExplanations}) => {
  const initialState = {
    coefficients: { a: '', b: '', c: '' },
    signs: { a: '+', b: '+', c: '+' }
  };

  const [coefficients, setCoefficients] = useState(initialState.coefficients);
  const [signs, setSigns] = useState(initialState.signs);
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');
  const [showComplexSolution, setShowComplexSolution] = useState(false);

  const normalizeNumber = (value) => {
    if (value === '') return '';
    const num = parseFloat(value);
    return isNaN(num) ? '' : num.toString();
  };

  const hasAnyCoefficient = () => {
    return coefficients.a !== '' || coefficients.b !== '' || coefficients.c !== '';
  };

  const getCurrentEquation = () => {
    if (!hasAnyCoefficient()) return '';

    const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
    const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
    const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);

    if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') return '';

    const formatCoef = (num, isFirst = false, hasX = true) => {
      if (num === 0 && !(!hasX && isFirst)) return '';
      const sign = num < 0 ? '-' : (isFirst ? '' : '+');
      const absNum = Math.abs(num);
      const numStr = absNum === 1 && hasX ? '' : absNum.toString();
      return `${sign}${numStr}`;
    };

    const aStr = formatCoef(a, true);
    const bStr = formatCoef(b, false);
    const cStr = formatCoef(c, false, false);

    let equation = '';
    if (aStr !== '') equation += `${aStr}x^2`;
    if (bStr !== '') equation += ` ${bStr}x`;
    if (cStr !== '') equation += ` ${cStr}`;
    equation += ' = 0';

    return equation.trim();
  };

  const renderKaTeX = (tex) => {
    if (!tex) return { __html: '' };
    return { __html: katex.renderToString(tex, { throwOnError: false, displayMode: false }) };
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    const newCoefficients = { ...coefficients, [name]: normalizeNumber(value) };
    setCoefficients(newCoefficients);
    setError('');
    
    if (name === 'c' && newCoefficients.a === '' && newCoefficients.b === '' && value !== '') {
      setError('Please enter at least one coefficient for x or xÂ² terms');
    }
  };

  const handleSignChange = (e) => {
    const { name, value } = e.target;
    setSigns(prev => ({ ...prev, [name]: value }));
  };

  const handleReset = () => {
    setCoefficients(initialState.coefficients);
    setSigns(initialState.signs);
    setResult(null);
    setError('');
    setShowComplexSolution(false);
  };

  const handleResetCoefficient = (coefficient) => {
    setCoefficients(prev => ({...prev, [coefficient]: ''}));
    setSigns(prev => ({...prev, [coefficient]: '+'}));
  };

  const handleShowComplexSolution = () => {
    setShowComplexSolution(true);
  };

  const validateInputs = () => {
    if (!hasAnyCoefficient()) {
      setError('Please enter at least one coefficient');
      return false;
    }

    if (coefficients.a === '' && coefficients.b === '' && coefficients.c !== '') {
      setError('Please enter at least one coefficient for x or xÂ² terms');
      return false;
    }

    return true;
  };

  const solveQuadratic = () => {
    setShowComplexSolution(false);
    setError('');
    setResult(null);

    if (!validateInputs()) return;

    const a = parseFloat(coefficients.a || '0') * (signs.a === '+' ? 1 : -1);
    const b = parseFloat(coefficients.b || '0') * (signs.b === '+' ? 1 : -1);
    const c = parseFloat(coefficients.c || '0') * (signs.c === '+' ? 1 : -1);
    const discriminant = b * b - 4 * a * c;

    if (a === 0 && b === 0 && c !== 0) {
      setError('Please enter at least one coefficient for x or xÂ² terms');
      return;
    }

    if (a === 0 && b !== 0) {
      const x = -c / b;
      setResult({ 
        type: 'linear', 
        x: x.toFixed(4),
        explanations: generateQuadraticExplanations(a, b, c, discriminant).linear
      });
      return;
    }

    if (discriminant > 0) {
      const x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
      const x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
      setResult({ 
        type: 'real', 
        x1: x1.toFixed(4), 
        x2: x2.toFixed(4),
        explanations: generateQuadraticExplanations(a, b, c, discriminant).real
      });
    } else if (discriminant === 0) {
      const x = -b / (2 * a);
      setResult({ 
        type: 'equal', 
        x: x.toFixed(4),
        explanations: generateQuadraticExplanations(a, b, c, discriminant).equal
      });
    } else {
      const realPart = (-b / (2 * a)).toFixed(4);
      const imaginaryPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(4);
      setResult({ 
        type: 'complex', 
        real: realPart, 
        imaginary: imaginaryPart,
        explanations: generateQuadraticExplanations(a, b, c, discriminant).complex
      });
    }
  };

  const SignToggle = ({ name, value, onChange }) => (
    <div className={styles.signToggleWrapper}>
      <button
        type="button"
        className={`${styles.signToggle} ${value === '-' ? styles.negative : ''}`}
        onClick={() => onChange({ target: { name, value: value === '+' ? '-' : '+' }})}
        aria-label="Toggle sign"
      >
        {value}
      </button>
      <span className={styles.tooltipText}>Click to Toggle Sign</span>
    </div>
  );

  const renderSolutions = () => {
    if (!result) return null;

    return (
      <div className={styles.solutionsWrapper}>
        {result.type === 'linear' && (
          <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
        )}

        {result.type === 'real' && (
          <>
            <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.x1}`)} />
            <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.x2}`)} />
          </>
        )}

        {result.type === 'equal' && (
          <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x = ${result.x}`)} />
        )}

        {result.type === 'complex' && showComplexSolution && (
          <>
            <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_1 = ${result.real} + ${result.imaginary}i`)} />
            <p className={styles.solution} dangerouslySetInnerHTML={renderKaTeX(`x_2 = ${result.real} - ${result.imaginary}i`)} />
          </>
        )}

        {result.type === 'complex' && !showComplexSolution && (
          <button onClick={handleShowComplexSolution} className={styles.showComplexButton}>
            Show complex solutions
          </button>
        )}
      </div>
    );
  };

  const renderExplanations = () => {
    if (!result) return null;

    return (
      <div className={styles.explanationsWrapper}>
        {result.explanations.initial.map((explanation, index) => (
          <div key={index} className={styles.explanation}>
            {explanation.text && (
              <p className={styles.explanationText}>{explanation.text}</p>
            )}
            {explanation.math && (
              <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
            )}
          </div>
        ))}

        {result.type === 'complex' && showComplexSolution && result.explanations.detailed && (
          <>
            {result.explanations.detailed.map((explanation, index) => (
              <div key={index} className={styles.explanation}>
                {explanation.text && (
                  <p className={styles.explanationText}>{explanation.text}</p>
                )}
                {explanation.math && (
                  <div className={styles.explanationMath} dangerouslySetInnerHTML={renderKaTeX(explanation.math)} />
                )}
              </div>
            ))}
          </>
        )}
      </div>
    );
  };

  return (
    <div className={styles.solverContainer}>
      <div className={styles.mainColumn}>
        <div className={styles.solverCard}>
          <div className={styles.currentEquation} dangerouslySetInnerHTML={renderKaTeX(getCurrentEquation())} />
          
          <div className={styles.inputContainer}>
            <div className={styles.inputGroup}>
              <SignToggle name="a" value={signs.a} onChange={handleSignChange} />
              <div className={styles.inputWrapper}>
                <input
                  type="number"
                  name="a"
                  value={coefficients.a}
                  onChange={handleInputChange}
                  placeholder="0"
                  className={styles.coefficientInput}
                />
                <button 
                  onClick={() => handleResetCoefficient('a')} 
                  className={styles.inlineResetBtn}
                  title="Reset value"
                >
                  <RotateCcw size={12} />
                </button>
                <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x^2")} />
              </div>
            </div>
            
            <div className={styles.inputGroup}>
              <SignToggle name="b" value={signs.b} onChange={handleSignChange} />
              <div className={styles.inputWrapper}>
                <input
                  type="number"
                  name="b"
                  value={coefficients.b}
                  onChange={handleInputChange}
                  placeholder="0"
                  className={styles.coefficientInput}
                />
                <button 
                  onClick={() => handleResetCoefficient('b')} 
                  className={styles.inlineResetBtn}
                  title="Reset value"
                  style={{marginRight:'-12px'}}
                >
                  <RotateCcw size={12} />
                </button>
                <span className={styles.term} dangerouslySetInnerHTML={renderKaTeX("x")} />
              </div>
            </div>
            
            <div className={styles.inputGroup}>
              <SignToggle name="c" value={signs.c} onChange={handleSignChange} />
              <div className={styles.inputWrapper}>
                <input
                  type="number"
                  name="c"
                  value={coefficients.c}
                  onChange={handleInputChange}
                  placeholder="0"
                  className={styles.coefficientInput}
                />
                <button 
                  onClick={() => handleResetCoefficient('c')} 
                  className={styles.inlineResetBtn}
                  title="Reset value"
                  style={{marginRight:'-28px'}}
                >
                  <RotateCcw size={12} />
                </button>
              </div>
            </div>
            <span className={styles.operator}>=</span>
            <span className={styles.term}>0</span>
          </div>

          <div className={styles.buttonContainer}>
            <button onClick={solveQuadratic} className={styles.solveButton}>Solve</button>
            <button onClick={handleReset} className={styles.resetButton}>Reset</button>
          </div>

          {error && <div className={styles.errorMessage}>{error}</div>}
        </div>
        
        {renderSolutions()}
      </div>

      <div className={styles.resultContainer}>
        {renderExplanations()}
      </div>
    </div>
  );
};

export default QuadraticSolver;